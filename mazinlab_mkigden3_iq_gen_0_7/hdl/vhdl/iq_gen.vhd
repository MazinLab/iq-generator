-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity iq_gen is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    out_r_TDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
    out_r_TVALID : OUT STD_LOGIC;
    out_r_TREADY : IN STD_LOGIC;
    out_r_TKEEP : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_r_TSTRB : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_r_TUSER : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    i_out_TDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
    i_out_TVALID : OUT STD_LOGIC;
    i_out_TREADY : IN STD_LOGIC;
    i_out_TKEEP : OUT STD_LOGIC_VECTOR (15 downto 0);
    i_out_TSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
    i_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    q_out_TDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
    q_out_TVALID : OUT STD_LOGIC;
    q_out_TREADY : IN STD_LOGIC;
    q_out_TKEEP : OUT STD_LOGIC_VECTOR (15 downto 0);
    q_out_TSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
    q_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    phase_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    phase_TVALID : OUT STD_LOGIC;
    phase_TREADY : IN STD_LOGIC;
    phase_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
    phase_TSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    phase_TUSER : OUT STD_LOGIC_VECTOR (15 downto 0);
    phase_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of iq_gen is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "iq_gen_iq_gen,hls_ip_2021_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu28dr-ffvg1517-2-e,HLS_INPUT_CLOCK=1.818000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.289063,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=193,HLS_SYN_LUT=1202,HLS_VERSION=2021_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv27_0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv30_1 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";
    constant ap_const_lv16_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_const_lv30_2 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000010";
    constant ap_const_lv16_3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000011";
    constant ap_const_lv30_3 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000011";
    constant ap_const_lv16_4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_const_lv30_4 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000100";
    constant ap_const_lv16_5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000101";
    constant ap_const_lv30_5 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000101";
    constant ap_const_lv16_6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000110";
    constant ap_const_lv30_6 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000110";
    constant ap_const_lv16_7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000111";
    constant ap_const_lv30_7 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000111";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv28_1 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv31_2 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000010";
    constant ap_const_lv31_3 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000011";
    constant ap_const_lv31_4 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000100";
    constant ap_const_lv31_5 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000101";
    constant ap_const_lv31_6 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000110";
    constant ap_const_lv31_7 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv27_1 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal ap_rst_n_inv : STD_LOGIC;
    signal max : STD_LOGIC_VECTOR (26 downto 0);
    signal run : STD_LOGIC;
    signal out_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal i_out_TDATA_blk_n : STD_LOGIC;
    signal q_out_TDATA_blk_n : STD_LOGIC;
    signal phase_TDATA_blk_n : STD_LOGIC;
    signal i_V2_reg_268 : STD_LOGIC_VECTOR (26 downto 0);
    signal max_read_reg_757 : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_load_fu_280_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln414_fu_440_p1 : STD_LOGIC_VECTOR (255 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_io : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal empty_fu_445_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_reg_777 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_1_3_fu_453_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp2_data_V_3_7_fu_466_p10 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_user_V_fu_490_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln76_fu_495_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ptmp_user_V_1_fu_500_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ptmp_user_V_1_reg_803 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_user_V_1_fu_506_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_user_V_1_reg_809 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1057_fu_512_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1057_reg_815 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln414_1_fu_679_p1 : STD_LOGIC_VECTOR (255 downto 0);
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal p_Result_4_3_fu_689_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_6_7_fu_702_p10 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln76_1_fu_726_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_last_V_fu_730_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ptmp_last_V_fu_738_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_V_fu_750_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal i_V_reg_853 : STD_LOGIC_VECTOR (26 downto 0);
    signal run_assign_load_reg_858 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_condition_pp0_flush_enable : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_phi_mux_i_V2_phi_fu_272_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal run_assign_fu_170 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_allocacmp_run_assign_load_1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal trunc_ln1525_fu_296_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal lhs_fu_288_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln_fu_300_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln225_fu_318_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal or_ln225_1_fu_334_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal or_ln225_2_fu_350_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal or_ln225_3_fu_366_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal or_ln225_4_fu_382_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal or_ln225_5_fu_398_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal or_ln225_6_fu_414_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal zext_ln1525_5_fu_404_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1525_4_fu_388_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1525_3_fu_372_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1525_2_fu_356_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1525_1_fu_340_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1525_fu_324_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln225_fu_308_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_420_p9 : STD_LOGIC_VECTOR (253 downto 0);
    signal or_ln1525_6_fu_408_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln1525_5_fu_392_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln1525_4_fu_376_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln1525_3_fu_360_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln1525_2_fu_344_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln1525_1_fu_328_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln1525_fu_312_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ptmp_user_V_fu_449_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_V_cast3_fu_517_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal add_i_i212_fu_521_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal trunc_ln1525_2_fu_535_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal lhs_V_fu_527_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln1525_1_fu_539_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln225_7_fu_557_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal or_ln225_8_fu_573_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal or_ln225_9_fu_589_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal or_ln225_10_fu_605_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal or_ln225_11_fu_621_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal or_ln225_12_fu_637_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal or_ln225_13_fu_653_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln1525_11_fu_643_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1525_10_fu_627_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1525_9_fu_611_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1525_8_fu_595_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1525_7_fu_579_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1525_6_fu_563_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln225_1_fu_547_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_659_p9 : STD_LOGIC_VECTOR (254 downto 0);
    signal tmp_trunc30_fu_684_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln1525_13_fu_647_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln1525_12_fu_631_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln1525_11_fu_615_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln1525_10_fu_599_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln1525_9_fu_583_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln1525_8_fu_567_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln1525_7_fu_551_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln223_fu_744_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal regslice_both_out_V_data_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_i_out_V_data_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_q_out_V_data_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_phase_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state5 : BOOLEAN;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal out_r_TDATA_int_regslice : STD_LOGIC_VECTOR (255 downto 0);
    signal out_r_TVALID_int_regslice : STD_LOGIC;
    signal out_r_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_out_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_V_user_V_U_apdone_blk : STD_LOGIC;
    signal out_r_TUSER_int_regslice : STD_LOGIC_VECTOR (7 downto 0);
    signal regslice_both_out_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_V_last_V_U_apdone_blk : STD_LOGIC;
    signal out_r_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_out_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_V_last_V_U_vld_out : STD_LOGIC;
    signal i_out_TDATA_int_regslice : STD_LOGIC_VECTOR (127 downto 0);
    signal i_out_TVALID_int_regslice : STD_LOGIC;
    signal i_out_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_i_out_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_i_out_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_i_out_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_i_out_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_i_out_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_i_out_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_i_out_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_i_out_V_last_V_U_apdone_blk : STD_LOGIC;
    signal i_out_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_i_out_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_i_out_V_last_V_U_vld_out : STD_LOGIC;
    signal q_out_TDATA_int_regslice : STD_LOGIC_VECTOR (127 downto 0);
    signal q_out_TVALID_int_regslice : STD_LOGIC;
    signal q_out_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_q_out_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_q_out_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_q_out_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_q_out_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_q_out_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_q_out_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_q_out_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_q_out_V_last_V_U_apdone_blk : STD_LOGIC;
    signal q_out_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_q_out_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_q_out_V_last_V_U_vld_out : STD_LOGIC;
    signal phase_TDATA_int_regslice : STD_LOGIC_VECTOR (63 downto 0);
    signal phase_TVALID_int_regslice : STD_LOGIC;
    signal phase_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_phase_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_phase_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_phase_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_phase_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_phase_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_phase_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_phase_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_phase_V_user_V_U_apdone_blk : STD_LOGIC;
    signal phase_TUSER_int_regslice : STD_LOGIC_VECTOR (15 downto 0);
    signal regslice_both_phase_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_phase_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_phase_V_last_V_U_apdone_blk : STD_LOGIC;
    signal phase_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_phase_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_phase_V_last_V_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component iq_gen_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        max : OUT STD_LOGIC_VECTOR (26 downto 0);
        run : OUT STD_LOGIC );
    end component;


    component iq_gen_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    control_s_axi_U : component iq_gen_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        max => max,
        run => run);

    regslice_both_out_V_data_V_U : component iq_gen_regslice_both
    generic map (
        DataWidth => 256)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => out_r_TDATA_int_regslice,
        vld_in => out_r_TVALID_int_regslice,
        ack_in => out_r_TREADY_int_regslice,
        data_out => out_r_TDATA,
        vld_out => regslice_both_out_V_data_V_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_V_data_V_U_apdone_blk);

    regslice_both_out_V_keep_V_U : component iq_gen_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv32_0,
        vld_in => out_r_TVALID_int_regslice,
        ack_in => regslice_both_out_V_keep_V_U_ack_in_dummy,
        data_out => out_r_TKEEP,
        vld_out => regslice_both_out_V_keep_V_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_V_keep_V_U_apdone_blk);

    regslice_both_out_V_strb_V_U : component iq_gen_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv32_0,
        vld_in => out_r_TVALID_int_regslice,
        ack_in => regslice_both_out_V_strb_V_U_ack_in_dummy,
        data_out => out_r_TSTRB,
        vld_out => regslice_both_out_V_strb_V_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_V_strb_V_U_apdone_blk);

    regslice_both_out_V_user_V_U : component iq_gen_regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => out_r_TUSER_int_regslice,
        vld_in => out_r_TVALID_int_regslice,
        ack_in => regslice_both_out_V_user_V_U_ack_in_dummy,
        data_out => out_r_TUSER,
        vld_out => regslice_both_out_V_user_V_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_V_user_V_U_apdone_blk);

    regslice_both_out_V_last_V_U : component iq_gen_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => out_r_TLAST_int_regslice,
        vld_in => out_r_TVALID_int_regslice,
        ack_in => regslice_both_out_V_last_V_U_ack_in_dummy,
        data_out => out_r_TLAST,
        vld_out => regslice_both_out_V_last_V_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_V_last_V_U_apdone_blk);

    regslice_both_i_out_V_data_V_U : component iq_gen_regslice_both
    generic map (
        DataWidth => 128)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => i_out_TDATA_int_regslice,
        vld_in => i_out_TVALID_int_regslice,
        ack_in => i_out_TREADY_int_regslice,
        data_out => i_out_TDATA,
        vld_out => regslice_both_i_out_V_data_V_U_vld_out,
        ack_out => i_out_TREADY,
        apdone_blk => regslice_both_i_out_V_data_V_U_apdone_blk);

    regslice_both_i_out_V_keep_V_U : component iq_gen_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv16_0,
        vld_in => i_out_TVALID_int_regslice,
        ack_in => regslice_both_i_out_V_keep_V_U_ack_in_dummy,
        data_out => i_out_TKEEP,
        vld_out => regslice_both_i_out_V_keep_V_U_vld_out,
        ack_out => i_out_TREADY,
        apdone_blk => regslice_both_i_out_V_keep_V_U_apdone_blk);

    regslice_both_i_out_V_strb_V_U : component iq_gen_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv16_0,
        vld_in => i_out_TVALID_int_regslice,
        ack_in => regslice_both_i_out_V_strb_V_U_ack_in_dummy,
        data_out => i_out_TSTRB,
        vld_out => regslice_both_i_out_V_strb_V_U_vld_out,
        ack_out => i_out_TREADY,
        apdone_blk => regslice_both_i_out_V_strb_V_U_apdone_blk);

    regslice_both_i_out_V_last_V_U : component iq_gen_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => i_out_TLAST_int_regslice,
        vld_in => i_out_TVALID_int_regslice,
        ack_in => regslice_both_i_out_V_last_V_U_ack_in_dummy,
        data_out => i_out_TLAST,
        vld_out => regslice_both_i_out_V_last_V_U_vld_out,
        ack_out => i_out_TREADY,
        apdone_blk => regslice_both_i_out_V_last_V_U_apdone_blk);

    regslice_both_q_out_V_data_V_U : component iq_gen_regslice_both
    generic map (
        DataWidth => 128)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => q_out_TDATA_int_regslice,
        vld_in => q_out_TVALID_int_regslice,
        ack_in => q_out_TREADY_int_regslice,
        data_out => q_out_TDATA,
        vld_out => regslice_both_q_out_V_data_V_U_vld_out,
        ack_out => q_out_TREADY,
        apdone_blk => regslice_both_q_out_V_data_V_U_apdone_blk);

    regslice_both_q_out_V_keep_V_U : component iq_gen_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv16_0,
        vld_in => q_out_TVALID_int_regslice,
        ack_in => regslice_both_q_out_V_keep_V_U_ack_in_dummy,
        data_out => q_out_TKEEP,
        vld_out => regslice_both_q_out_V_keep_V_U_vld_out,
        ack_out => q_out_TREADY,
        apdone_blk => regslice_both_q_out_V_keep_V_U_apdone_blk);

    regslice_both_q_out_V_strb_V_U : component iq_gen_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv16_0,
        vld_in => q_out_TVALID_int_regslice,
        ack_in => regslice_both_q_out_V_strb_V_U_ack_in_dummy,
        data_out => q_out_TSTRB,
        vld_out => regslice_both_q_out_V_strb_V_U_vld_out,
        ack_out => q_out_TREADY,
        apdone_blk => regslice_both_q_out_V_strb_V_U_apdone_blk);

    regslice_both_q_out_V_last_V_U : component iq_gen_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => q_out_TLAST_int_regslice,
        vld_in => q_out_TVALID_int_regslice,
        ack_in => regslice_both_q_out_V_last_V_U_ack_in_dummy,
        data_out => q_out_TLAST,
        vld_out => regslice_both_q_out_V_last_V_U_vld_out,
        ack_out => q_out_TREADY,
        apdone_blk => regslice_both_q_out_V_last_V_U_apdone_blk);

    regslice_both_phase_V_data_V_U : component iq_gen_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => phase_TDATA_int_regslice,
        vld_in => phase_TVALID_int_regslice,
        ack_in => phase_TREADY_int_regslice,
        data_out => phase_TDATA,
        vld_out => regslice_both_phase_V_data_V_U_vld_out,
        ack_out => phase_TREADY,
        apdone_blk => regslice_both_phase_V_data_V_U_apdone_blk);

    regslice_both_phase_V_keep_V_U : component iq_gen_regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv8_0,
        vld_in => phase_TVALID_int_regslice,
        ack_in => regslice_both_phase_V_keep_V_U_ack_in_dummy,
        data_out => phase_TKEEP,
        vld_out => regslice_both_phase_V_keep_V_U_vld_out,
        ack_out => phase_TREADY,
        apdone_blk => regslice_both_phase_V_keep_V_U_apdone_blk);

    regslice_both_phase_V_strb_V_U : component iq_gen_regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv8_0,
        vld_in => phase_TVALID_int_regslice,
        ack_in => regslice_both_phase_V_strb_V_U_ack_in_dummy,
        data_out => phase_TSTRB,
        vld_out => regslice_both_phase_V_strb_V_U_vld_out,
        ack_out => phase_TREADY,
        apdone_blk => regslice_both_phase_V_strb_V_U_apdone_blk);

    regslice_both_phase_V_user_V_U : component iq_gen_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => phase_TUSER_int_regslice,
        vld_in => phase_TVALID_int_regslice,
        ack_in => regslice_both_phase_V_user_V_U_ack_in_dummy,
        data_out => phase_TUSER,
        vld_out => regslice_both_phase_V_user_V_U_vld_out,
        ack_out => phase_TREADY,
        apdone_blk => regslice_both_phase_V_user_V_U_apdone_blk);

    regslice_both_phase_V_last_V_U : component iq_gen_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => phase_TLAST_int_regslice,
        vld_in => phase_TVALID_int_regslice,
        ack_in => regslice_both_phase_V_last_V_U_ack_in_dummy,
        data_out => phase_TLAST,
        vld_out => regslice_both_phase_V_last_V_U_vld_out,
        ack_out => phase_TREADY,
        apdone_blk => regslice_both_phase_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp0_flush_enable)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((grp_load_fu_280_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((grp_load_fu_280_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_V2_reg_268_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_load_fu_280_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_V2_reg_268 <= ap_const_lv27_0;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (run_assign_load_reg_858 = ap_const_lv1_1))) then 
                i_V2_reg_268 <= i_V_reg_853;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                empty_reg_777 <= empty_fu_445_p1;
                icmp_ln1057_reg_815 <= icmp_ln1057_fu_512_p2;
                ptmp_user_V_1_reg_803 <= ptmp_user_V_1_fu_500_p2;
                tmp_user_V_1_reg_809 <= tmp_user_V_1_fu_506_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                i_V_reg_853 <= i_V_fu_750_p3;
                run_assign_load_reg_858 <= grp_load_fu_280_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                max_read_reg_757 <= max;
                run_assign_fu_170 <= (0=>run, others=>'-');
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_state1, grp_load_fu_280_p1, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, regslice_both_out_V_data_V_U_apdone_blk, regslice_both_i_out_V_data_V_U_apdone_blk, regslice_both_q_out_V_data_V_U_apdone_blk, regslice_both_phase_V_data_V_U_apdone_blk, ap_CS_fsm_state5)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((grp_load_fu_280_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state5 => 
                if ((not(((regslice_both_phase_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_q_out_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_i_out_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_out_V_data_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_i_i212_fu_521_p2 <= std_logic_vector(unsigned(i_V_cast3_fu_517_p1) + unsigned(ap_const_lv28_1));
    add_ln223_fu_744_p2 <= std_logic_vector(unsigned(i_V2_reg_268) + unsigned(ap_const_lv27_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
    ap_ST_fsm_state1_blk <= ap_const_logic_0;

    ap_ST_fsm_state5_blk_assign_proc : process(regslice_both_out_V_data_V_U_apdone_blk, regslice_both_i_out_V_data_V_U_apdone_blk, regslice_both_q_out_V_data_V_U_apdone_blk, regslice_both_phase_V_data_V_U_apdone_blk)
    begin
        if (((regslice_both_phase_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_q_out_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_i_out_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_out_V_data_V_U_apdone_blk = ap_const_logic_1))) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, out_r_TREADY_int_regslice, i_out_TREADY_int_regslice, q_out_TREADY_int_regslice, phase_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((phase_TREADY_int_regslice = ap_const_logic_0) or (q_out_TREADY_int_regslice = ap_const_logic_0) or (i_out_TREADY_int_regslice = ap_const_logic_0) or (out_r_TREADY_int_regslice = ap_const_logic_0))) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((phase_TREADY_int_regslice = ap_const_logic_0) or (q_out_TREADY_int_regslice = ap_const_logic_0) or (i_out_TREADY_int_regslice = ap_const_logic_0) or (out_r_TREADY_int_regslice = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_state2_io, ap_block_state4_io, out_r_TREADY_int_regslice, i_out_TREADY_int_regslice, q_out_TREADY_int_regslice, phase_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((phase_TREADY_int_regslice = ap_const_logic_0) or (q_out_TREADY_int_regslice = ap_const_logic_0) or (i_out_TREADY_int_regslice = ap_const_logic_0) or (out_r_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state4_io))) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((phase_TREADY_int_regslice = ap_const_logic_0) or (q_out_TREADY_int_regslice = ap_const_logic_0) or (i_out_TREADY_int_regslice = ap_const_logic_0) or (out_r_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_io))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_state2_io, ap_block_state4_io, out_r_TREADY_int_regslice, i_out_TREADY_int_regslice, q_out_TREADY_int_regslice, phase_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((phase_TREADY_int_regslice = ap_const_logic_0) or (q_out_TREADY_int_regslice = ap_const_logic_0) or (i_out_TREADY_int_regslice = ap_const_logic_0) or (out_r_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state4_io))) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((phase_TREADY_int_regslice = ap_const_logic_0) or (q_out_TREADY_int_regslice = ap_const_logic_0) or (i_out_TREADY_int_regslice = ap_const_logic_0) or (out_r_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_io))));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_01001_assign_proc : process(ap_enable_reg_pp0_iter0, out_r_TREADY_int_regslice, i_out_TREADY_int_regslice, q_out_TREADY_int_regslice, phase_TREADY_int_regslice)
    begin
                ap_block_pp0_stage1_01001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((phase_TREADY_int_regslice = ap_const_logic_0) or (q_out_TREADY_int_regslice = ap_const_logic_0) or (i_out_TREADY_int_regslice = ap_const_logic_0) or (out_r_TREADY_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state3_io, out_r_TREADY_int_regslice, i_out_TREADY_int_regslice, q_out_TREADY_int_regslice, phase_TREADY_int_regslice)
    begin
                ap_block_pp0_stage1_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((phase_TREADY_int_regslice = ap_const_logic_0) or (q_out_TREADY_int_regslice = ap_const_logic_0) or (i_out_TREADY_int_regslice = ap_const_logic_0) or (out_r_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state3_io)));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state3_io, out_r_TREADY_int_regslice, i_out_TREADY_int_regslice, q_out_TREADY_int_regslice, phase_TREADY_int_regslice)
    begin
                ap_block_pp0_stage1_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((phase_TREADY_int_regslice = ap_const_logic_0) or (q_out_TREADY_int_regslice = ap_const_logic_0) or (i_out_TREADY_int_regslice = ap_const_logic_0) or (out_r_TREADY_int_regslice = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state3_io)));
    end process;


    ap_block_state2_io_assign_proc : process(out_r_TREADY_int_regslice, i_out_TREADY_int_regslice, q_out_TREADY_int_regslice, phase_TREADY_int_regslice)
    begin
                ap_block_state2_io <= ((phase_TREADY_int_regslice = ap_const_logic_0) or (q_out_TREADY_int_regslice = ap_const_logic_0) or (i_out_TREADY_int_regslice = ap_const_logic_0) or (out_r_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state2_pp0_stage0_iter0_assign_proc : process(out_r_TREADY_int_regslice, i_out_TREADY_int_regslice, q_out_TREADY_int_regslice, phase_TREADY_int_regslice)
    begin
                ap_block_state2_pp0_stage0_iter0 <= ((phase_TREADY_int_regslice = ap_const_logic_0) or (q_out_TREADY_int_regslice = ap_const_logic_0) or (i_out_TREADY_int_regslice = ap_const_logic_0) or (out_r_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state3_io_assign_proc : process(out_r_TREADY_int_regslice, i_out_TREADY_int_regslice, q_out_TREADY_int_regslice, phase_TREADY_int_regslice)
    begin
                ap_block_state3_io <= ((phase_TREADY_int_regslice = ap_const_logic_0) or (q_out_TREADY_int_regslice = ap_const_logic_0) or (i_out_TREADY_int_regslice = ap_const_logic_0) or (out_r_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state3_pp0_stage1_iter0_assign_proc : process(out_r_TREADY_int_regslice, i_out_TREADY_int_regslice, q_out_TREADY_int_regslice, phase_TREADY_int_regslice)
    begin
                ap_block_state3_pp0_stage1_iter0 <= ((phase_TREADY_int_regslice = ap_const_logic_0) or (q_out_TREADY_int_regslice = ap_const_logic_0) or (i_out_TREADY_int_regslice = ap_const_logic_0) or (out_r_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state4_io_assign_proc : process(out_r_TREADY_int_regslice, i_out_TREADY_int_regslice, q_out_TREADY_int_regslice, phase_TREADY_int_regslice)
    begin
                ap_block_state4_io <= ((phase_TREADY_int_regslice = ap_const_logic_0) or (q_out_TREADY_int_regslice = ap_const_logic_0) or (i_out_TREADY_int_regslice = ap_const_logic_0) or (out_r_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state4_pp0_stage0_iter1_assign_proc : process(out_r_TREADY_int_regslice, i_out_TREADY_int_regslice, q_out_TREADY_int_regslice, phase_TREADY_int_regslice)
    begin
                ap_block_state4_pp0_stage0_iter1 <= ((phase_TREADY_int_regslice = ap_const_logic_0) or (q_out_TREADY_int_regslice = ap_const_logic_0) or (i_out_TREADY_int_regslice = ap_const_logic_0) or (out_r_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state5_assign_proc : process(regslice_both_out_V_data_V_U_apdone_blk, regslice_both_i_out_V_data_V_U_apdone_blk, regslice_both_q_out_V_data_V_U_apdone_blk, regslice_both_phase_V_data_V_U_apdone_blk)
    begin
                ap_block_state5 <= ((regslice_both_phase_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_q_out_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_i_out_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_out_V_data_V_U_apdone_blk = ap_const_logic_1));
    end process;


    ap_condition_pp0_flush_enable_assign_proc : process(ap_CS_fsm_pp0_stage1, grp_load_fu_280_p1, ap_block_pp0_stage1_subdone)
    begin
        if (((grp_load_fu_280_p1 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_pp0_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp0_flush_enable <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_V2_phi_fu_272_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, i_V2_reg_268, i_V_reg_853, run_assign_load_reg_858)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (run_assign_load_reg_858 = ap_const_lv1_1))) then 
            ap_phi_mux_i_V2_phi_fu_272_p4 <= i_V_reg_853;
        else 
            ap_phi_mux_i_V2_phi_fu_272_p4 <= i_V2_reg_268;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_allocacmp_run_assign_load_1_assign_proc : process(run, ap_CS_fsm_state1, run_assign_fu_170)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            ap_sig_allocacmp_run_assign_load_1 <= (0=>run, others=>'-');
        else 
            ap_sig_allocacmp_run_assign_load_1 <= run_assign_fu_170;
        end if; 
    end process;

    empty_fu_445_p1 <= ap_phi_mux_i_V2_phi_fu_272_p4(16 - 1 downto 0);

    grp_load_fu_280_p1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_state1, run_assign_fu_170, ap_sig_allocacmp_run_assign_load_1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_load_fu_280_p1 <= run_assign_fu_170;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_load_fu_280_p1 <= ap_sig_allocacmp_run_assign_load_1;
        else 
            grp_load_fu_280_p1 <= "X";
        end if; 
    end process;

    i_V_cast3_fu_517_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_V2_reg_268),28));
    i_V_fu_750_p3 <= 
        add_ln223_fu_744_p2 when (icmp_ln1057_reg_815(0) = '1') else 
        ap_const_lv27_0;

    i_out_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_enable_reg_pp0_iter1, i_out_TREADY_int_regslice)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            i_out_TDATA_blk_n <= i_out_TREADY_int_regslice;
        else 
            i_out_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    i_out_TDATA_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, tmp2_data_V_3_7_fu_466_p10, p_Result_6_7_fu_702_p10, ap_block_pp0_stage0_01001, ap_block_pp0_stage1_01001)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                i_out_TDATA_int_regslice <= p_Result_6_7_fu_702_p10;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_out_TDATA_int_regslice <= tmp2_data_V_3_7_fu_466_p10;
            else 
                i_out_TDATA_int_regslice <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            i_out_TDATA_int_regslice <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    i_out_TLAST_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, tmp_last_V_fu_730_p2, ap_block_pp0_stage0_01001, ap_block_pp0_stage1_01001)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                i_out_TLAST_int_regslice <= tmp_last_V_fu_730_p2;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_out_TLAST_int_regslice <= ap_const_lv1_0;
            else 
                i_out_TLAST_int_regslice <= "X";
            end if;
        else 
            i_out_TLAST_int_regslice <= "X";
        end if; 
    end process;

    i_out_TVALID <= regslice_both_i_out_V_data_V_U_vld_out;

    i_out_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            i_out_TVALID_int_regslice <= ap_const_logic_1;
        else 
            i_out_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1057_fu_512_p2 <= "1" when (unsigned(ap_phi_mux_i_V2_phi_fu_272_p4) < unsigned(max_read_reg_757)) else "0";
    lhs_V_fu_527_p3 <= (add_i_i212_fu_521_p2 & ap_const_lv3_0);
    lhs_fu_288_p3 <= (ap_phi_mux_i_V2_phi_fu_272_p4 & ap_const_lv3_0);
    or_ln1525_10_fu_599_p2 <= (trunc_ln1525_1_fu_539_p3 or ap_const_lv16_4);
    or_ln1525_11_fu_615_p2 <= (trunc_ln1525_1_fu_539_p3 or ap_const_lv16_5);
    or_ln1525_12_fu_631_p2 <= (trunc_ln1525_1_fu_539_p3 or ap_const_lv16_6);
    or_ln1525_13_fu_647_p2 <= (trunc_ln1525_1_fu_539_p3 or ap_const_lv16_7);
    or_ln1525_1_fu_328_p2 <= (trunc_ln_fu_300_p3 or ap_const_lv16_2);
    or_ln1525_2_fu_344_p2 <= (trunc_ln_fu_300_p3 or ap_const_lv16_3);
    or_ln1525_3_fu_360_p2 <= (trunc_ln_fu_300_p3 or ap_const_lv16_4);
    or_ln1525_4_fu_376_p2 <= (trunc_ln_fu_300_p3 or ap_const_lv16_5);
    or_ln1525_5_fu_392_p2 <= (trunc_ln_fu_300_p3 or ap_const_lv16_6);
    or_ln1525_6_fu_408_p2 <= (trunc_ln_fu_300_p3 or ap_const_lv16_7);
    or_ln1525_7_fu_551_p2 <= (trunc_ln1525_1_fu_539_p3 or ap_const_lv16_1);
    or_ln1525_8_fu_567_p2 <= (trunc_ln1525_1_fu_539_p3 or ap_const_lv16_2);
    or_ln1525_9_fu_583_p2 <= (trunc_ln1525_1_fu_539_p3 or ap_const_lv16_3);
    or_ln1525_fu_312_p2 <= (trunc_ln_fu_300_p3 or ap_const_lv16_1);
    or_ln225_10_fu_605_p2 <= (lhs_V_fu_527_p3 or ap_const_lv31_4);
    or_ln225_11_fu_621_p2 <= (lhs_V_fu_527_p3 or ap_const_lv31_5);
    or_ln225_12_fu_637_p2 <= (lhs_V_fu_527_p3 or ap_const_lv31_6);
    or_ln225_13_fu_653_p2 <= (lhs_V_fu_527_p3 or ap_const_lv31_7);
    or_ln225_1_fu_334_p2 <= (lhs_fu_288_p3 or ap_const_lv30_2);
    or_ln225_2_fu_350_p2 <= (lhs_fu_288_p3 or ap_const_lv30_3);
    or_ln225_3_fu_366_p2 <= (lhs_fu_288_p3 or ap_const_lv30_4);
    or_ln225_4_fu_382_p2 <= (lhs_fu_288_p3 or ap_const_lv30_5);
    or_ln225_5_fu_398_p2 <= (lhs_fu_288_p3 or ap_const_lv30_6);
    or_ln225_6_fu_414_p2 <= (lhs_fu_288_p3 or ap_const_lv30_7);
    or_ln225_7_fu_557_p2 <= (lhs_V_fu_527_p3 or ap_const_lv31_1);
    or_ln225_8_fu_573_p2 <= (lhs_V_fu_527_p3 or ap_const_lv31_2);
    or_ln225_9_fu_589_p2 <= (lhs_V_fu_527_p3 or ap_const_lv31_3);
    or_ln225_fu_318_p2 <= (lhs_fu_288_p3 or ap_const_lv30_1);

    out_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_enable_reg_pp0_iter1, out_r_TREADY_int_regslice)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            out_r_TDATA_blk_n <= out_r_TREADY_int_regslice;
        else 
            out_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    out_r_TDATA_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, zext_ln414_fu_440_p1, zext_ln414_1_fu_679_p1, ap_block_pp0_stage0_01001, ap_block_pp0_stage1_01001)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                out_r_TDATA_int_regslice <= zext_ln414_1_fu_679_p1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                out_r_TDATA_int_regslice <= zext_ln414_fu_440_p1;
            else 
                out_r_TDATA_int_regslice <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            out_r_TDATA_int_regslice <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_r_TLAST_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, tmp_last_V_fu_730_p2, ap_block_pp0_stage0_01001, ap_block_pp0_stage1_01001)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                out_r_TLAST_int_regslice <= tmp_last_V_fu_730_p2;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                out_r_TLAST_int_regslice <= ap_const_lv1_0;
            else 
                out_r_TLAST_int_regslice <= "X";
            end if;
        else 
            out_r_TLAST_int_regslice <= "X";
        end if; 
    end process;


    out_r_TUSER_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, tmp_user_V_fu_490_p1, tmp_user_V_1_reg_809, ap_block_pp0_stage0_01001, ap_block_pp0_stage1_01001)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                out_r_TUSER_int_regslice <= tmp_user_V_1_reg_809;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                out_r_TUSER_int_regslice <= tmp_user_V_fu_490_p1;
            else 
                out_r_TUSER_int_regslice <= "XXXXXXXX";
            end if;
        else 
            out_r_TUSER_int_regslice <= "XXXXXXXX";
        end if; 
    end process;

    out_r_TVALID <= regslice_both_out_V_data_V_U_vld_out;

    out_r_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            out_r_TVALID_int_regslice <= ap_const_logic_1;
        else 
            out_r_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_1_3_fu_453_p5 <= (((empty_fu_445_p1 & empty_fu_445_p1) & empty_fu_445_p1) & empty_fu_445_p1);
    p_Result_4_3_fu_689_p5 <= (((tmp_trunc30_fu_684_p2 & tmp_trunc30_fu_684_p2) & tmp_trunc30_fu_684_p2) & tmp_trunc30_fu_684_p2);
    p_Result_6_7_fu_702_p10 <= ((((((((or_ln1525_13_fu_647_p2 & or_ln1525_12_fu_631_p2) & or_ln1525_11_fu_615_p2) & or_ln1525_10_fu_599_p2) & or_ln1525_9_fu_583_p2) & or_ln1525_8_fu_567_p2) & or_ln1525_7_fu_551_p2) & trunc_ln1525_2_fu_535_p1) & ap_const_lv3_0);

    phase_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_enable_reg_pp0_iter1, phase_TREADY_int_regslice)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            phase_TDATA_blk_n <= phase_TREADY_int_regslice;
        else 
            phase_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    phase_TDATA_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, p_Result_1_3_fu_453_p5, p_Result_4_3_fu_689_p5, ap_block_pp0_stage0_01001, ap_block_pp0_stage1_01001)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                phase_TDATA_int_regslice <= p_Result_4_3_fu_689_p5;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                phase_TDATA_int_regslice <= p_Result_1_3_fu_453_p5;
            else 
                phase_TDATA_int_regslice <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            phase_TDATA_int_regslice <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    phase_TLAST_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ptmp_last_V_fu_738_p2, ap_block_pp0_stage0_01001, ap_block_pp0_stage1_01001)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                phase_TLAST_int_regslice <= ptmp_last_V_fu_738_p2;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                phase_TLAST_int_regslice <= ap_const_lv1_0;
            else 
                phase_TLAST_int_regslice <= "X";
            end if;
        else 
            phase_TLAST_int_regslice <= "X";
        end if; 
    end process;


    phase_TUSER_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, zext_ln76_fu_495_p1, zext_ln76_1_fu_726_p1, ap_block_pp0_stage0_01001, ap_block_pp0_stage1_01001)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                phase_TUSER_int_regslice <= zext_ln76_1_fu_726_p1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                phase_TUSER_int_regslice <= zext_ln76_fu_495_p1;
            else 
                phase_TUSER_int_regslice <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            phase_TUSER_int_regslice <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    phase_TVALID <= regslice_both_phase_V_data_V_U_vld_out;

    phase_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            phase_TVALID_int_regslice <= ap_const_logic_1;
        else 
            phase_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    ptmp_last_V_fu_738_p2 <= "1" when (ptmp_user_V_1_reg_803 = ap_const_lv9_1FF) else "0";
    ptmp_user_V_1_fu_500_p2 <= std_logic_vector(unsigned(ptmp_user_V_fu_449_p1) + unsigned(ap_const_lv9_1));
    ptmp_user_V_fu_449_p1 <= ap_phi_mux_i_V2_phi_fu_272_p4(9 - 1 downto 0);

    q_out_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_enable_reg_pp0_iter1, q_out_TREADY_int_regslice)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            q_out_TDATA_blk_n <= q_out_TREADY_int_regslice;
        else 
            q_out_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    q_out_TDATA_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, tmp2_data_V_3_7_fu_466_p10, p_Result_6_7_fu_702_p10, ap_block_pp0_stage0_01001, ap_block_pp0_stage1_01001)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                q_out_TDATA_int_regslice <= p_Result_6_7_fu_702_p10;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                q_out_TDATA_int_regslice <= tmp2_data_V_3_7_fu_466_p10;
            else 
                q_out_TDATA_int_regslice <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            q_out_TDATA_int_regslice <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    q_out_TLAST_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, tmp_last_V_fu_730_p2, ap_block_pp0_stage0_01001, ap_block_pp0_stage1_01001)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                q_out_TLAST_int_regslice <= tmp_last_V_fu_730_p2;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                q_out_TLAST_int_regslice <= ap_const_lv1_0;
            else 
                q_out_TLAST_int_regslice <= "X";
            end if;
        else 
            q_out_TLAST_int_regslice <= "X";
        end if; 
    end process;

    q_out_TVALID <= regslice_both_q_out_V_data_V_U_vld_out;

    q_out_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            q_out_TVALID_int_regslice <= ap_const_logic_1;
        else 
            q_out_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    tmp2_data_V_3_7_fu_466_p10 <= ((((((((or_ln1525_6_fu_408_p2 & or_ln1525_5_fu_392_p2) & or_ln1525_4_fu_376_p2) & or_ln1525_3_fu_360_p2) & or_ln1525_2_fu_344_p2) & or_ln1525_1_fu_328_p2) & or_ln1525_fu_312_p2) & trunc_ln1525_fu_296_p1) & ap_const_lv3_0);
    tmp_1_fu_420_p9 <= (((((((or_ln225_6_fu_414_p2 & zext_ln1525_5_fu_404_p1) & zext_ln1525_4_fu_388_p1) & zext_ln1525_3_fu_372_p1) & zext_ln1525_2_fu_356_p1) & zext_ln1525_1_fu_340_p1) & zext_ln1525_fu_324_p1) & zext_ln225_fu_308_p1);
    tmp_5_fu_659_p9 <= (((((((or_ln225_13_fu_653_p2 & zext_ln1525_11_fu_643_p1) & zext_ln1525_10_fu_627_p1) & zext_ln1525_9_fu_611_p1) & zext_ln1525_8_fu_595_p1) & zext_ln1525_7_fu_579_p1) & zext_ln1525_6_fu_563_p1) & zext_ln225_1_fu_547_p1);
    tmp_last_V_fu_730_p2 <= "1" when (tmp_user_V_1_reg_809 = ap_const_lv8_FF) else "0";
    tmp_trunc30_fu_684_p2 <= std_logic_vector(unsigned(empty_reg_777) + unsigned(ap_const_lv16_1));
    tmp_user_V_1_fu_506_p2 <= std_logic_vector(unsigned(tmp_user_V_fu_490_p1) + unsigned(ap_const_lv8_1));
    tmp_user_V_fu_490_p1 <= ap_phi_mux_i_V2_phi_fu_272_p4(8 - 1 downto 0);
    trunc_ln1525_1_fu_539_p3 <= (trunc_ln1525_2_fu_535_p1 & ap_const_lv3_0);
    trunc_ln1525_2_fu_535_p1 <= add_i_i212_fu_521_p2(13 - 1 downto 0);
    trunc_ln1525_fu_296_p1 <= ap_phi_mux_i_V2_phi_fu_272_p4(13 - 1 downto 0);
    trunc_ln_fu_300_p3 <= (trunc_ln1525_fu_296_p1 & ap_const_lv3_0);
    zext_ln1525_10_fu_627_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln225_11_fu_621_p2),32));
    zext_ln1525_11_fu_643_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln225_12_fu_637_p2),32));
    zext_ln1525_1_fu_340_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln225_1_fu_334_p2),32));
    zext_ln1525_2_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln225_2_fu_350_p2),32));
    zext_ln1525_3_fu_372_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln225_3_fu_366_p2),32));
    zext_ln1525_4_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln225_4_fu_382_p2),32));
    zext_ln1525_5_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln225_5_fu_398_p2),32));
    zext_ln1525_6_fu_563_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln225_7_fu_557_p2),32));
    zext_ln1525_7_fu_579_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln225_8_fu_573_p2),32));
    zext_ln1525_8_fu_595_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln225_9_fu_589_p2),32));
    zext_ln1525_9_fu_611_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln225_10_fu_605_p2),32));
    zext_ln1525_fu_324_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln225_fu_318_p2),32));
    zext_ln225_1_fu_547_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lhs_V_fu_527_p3),32));
    zext_ln225_fu_308_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lhs_fu_288_p3),32));
    zext_ln414_1_fu_679_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_659_p9),256));
    zext_ln414_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_420_p9),256));
    zext_ln76_1_fu_726_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ptmp_user_V_1_reg_803),16));
    zext_ln76_fu_495_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ptmp_user_V_fu_449_p1),16));
end behav;
