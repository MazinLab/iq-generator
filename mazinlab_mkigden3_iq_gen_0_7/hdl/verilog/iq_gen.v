// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="iq_gen_iq_gen,hls_ip_2021_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu28dr-ffvg1517-2-e,HLS_INPUT_CLOCK=1.818000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.277875,HLS_SYN_LAT=67108929,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=187,HLS_SYN_LUT=940,HLS_VERSION=2021_1}" *)

module iq_gen (
// synthesis translate_off
    kernel_block,
// synthesis translate_on
        ap_clk,
        ap_rst_n,
        out_r_TDATA,
        out_r_TVALID,
        out_r_TREADY,
        out_r_TKEEP,
        out_r_TSTRB,
        out_r_TUSER,
        out_r_TLAST,
        i_out_TDATA,
        i_out_TVALID,
        i_out_TREADY,
        i_out_TKEEP,
        i_out_TSTRB,
        i_out_TLAST,
        q_out_TDATA,
        q_out_TVALID,
        q_out_TREADY,
        q_out_TKEEP,
        q_out_TSTRB,
        q_out_TLAST,
        phase_TDATA,
        phase_TVALID,
        phase_TREADY,
        phase_TKEEP,
        phase_TSTRB,
        phase_TUSER,
        phase_TLAST,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

// synthesis translate_off
output kernel_block;
// synthesis translate_on
input   ap_clk;
input   ap_rst_n;
output  [255:0] out_r_TDATA;
output   out_r_TVALID;
input   out_r_TREADY;
output  [31:0] out_r_TKEEP;
output  [31:0] out_r_TSTRB;
output  [7:0] out_r_TUSER;
output  [0:0] out_r_TLAST;
output  [127:0] i_out_TDATA;
output   i_out_TVALID;
input   i_out_TREADY;
output  [15:0] i_out_TKEEP;
output  [15:0] i_out_TSTRB;
output  [0:0] i_out_TLAST;
output  [127:0] q_out_TDATA;
output   q_out_TVALID;
input   q_out_TREADY;
output  [15:0] q_out_TKEEP;
output  [15:0] q_out_TSTRB;
output  [0:0] q_out_TLAST;
output  [63:0] phase_TDATA;
output   phase_TVALID;
input   phase_TREADY;
output  [7:0] phase_TKEEP;
output  [7:0] phase_TSTRB;
output  [15:0] phase_TUSER;
output  [0:0] phase_TLAST;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;

 reg    ap_rst_n_inv;
wire   [26:0] max;
wire    run;
reg    out_r_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
reg    ap_enable_reg_pp0_iter1;
reg    i_out_TDATA_blk_n;
reg    q_out_TDATA_blk_n;
reg    phase_TDATA_blk_n;
reg   [25:0] i_V2_reg_264;
reg   [25:0] trunc_ln_reg_763;
wire    ap_CS_fsm_state1;
reg   [0:0] grp_load_fu_276_p1;
wire   [255:0] zext_ln392_fu_392_p1;
reg    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state2_io;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_state4_io;
reg    ap_block_pp0_stage0_11001;
wire   [14:0] empty_fu_397_p1;
reg   [14:0] empty_reg_777;
wire   [8:0] ptmp_user_V_fu_405_p3;
reg   [8:0] ptmp_user_V_reg_782;
wire   [63:0] p_Result_1_3_fu_413_p9;
wire   [127:0] tmp2_data_V_3_7_fu_466_p10;
wire   [7:0] tmp_user_V_fu_494_p3;
reg   [7:0] tmp_user_V_reg_798;
wire   [15:0] zext_ln21_fu_503_p1;
wire   [0:0] icmp_ln1057_fu_508_p2;
reg   [0:0] icmp_ln1057_reg_809;
wire   [255:0] zext_ln392_1_fu_632_p1;
reg    ap_block_state3_pp0_stage1_iter0;
reg    ap_block_state3_io;
reg    ap_block_pp0_stage1_11001;
wire   [63:0] p_Result_4_3_fu_643_p5;
wire   [127:0] p_Result_6_7_fu_688_p10;
wire   [7:0] tmp_user_V_1_fu_712_p2;
wire   [15:0] zext_ln21_1_fu_723_p1;
wire   [0:0] tmp_last_V_fu_728_p2;
wire   [0:0] ptmp_last_V_fu_737_p2;
wire   [25:0] i_V_fu_750_p3;
reg   [25:0] i_V_reg_852;
reg   [0:0] run_assign_load_reg_857;
reg    ap_block_pp0_stage1_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_block_pp0_stage0_subdone;
reg   [25:0] ap_phi_mux_i_V2_phi_fu_268_p4;
reg   [0:0] run_assign_fu_166;
reg   [0:0] ap_sig_allocacmp_run_assign_load_1;
reg    ap_block_pp0_stage0_01001;
reg    ap_block_pp0_stage1_01001;
wire   [29:0] mul2_fu_294_p3;
wire   [29:0] or_ln25_fu_306_p2;
wire   [29:0] or_ln25_1_fu_316_p2;
wire   [29:0] or_ln25_2_fu_326_p2;
wire   [29:0] or_ln25_3_fu_336_p2;
wire   [29:0] or_ln25_4_fu_346_p2;
wire   [29:0] or_ln25_5_fu_356_p2;
wire   [29:0] or_ln25_6_fu_366_p2;
wire   [31:0] zext_ln25_6_fu_362_p1;
wire   [31:0] zext_ln25_5_fu_352_p1;
wire   [31:0] zext_ln25_4_fu_342_p1;
wire   [31:0] zext_ln25_3_fu_332_p1;
wire   [31:0] zext_ln25_2_fu_322_p1;
wire   [31:0] zext_ln25_1_fu_312_p1;
wire   [31:0] zext_ln25_fu_302_p1;
wire   [253:0] tmp_1_fu_372_p9;
wire   [7:0] trunc_ln392_fu_401_p1;
wire   [15:0] trunc_ln674_7_fu_462_p1;
wire   [15:0] trunc_ln674_6_fu_458_p1;
wire   [15:0] trunc_ln674_5_fu_454_p1;
wire   [15:0] trunc_ln674_4_fu_450_p1;
wire   [15:0] trunc_ln674_3_fu_446_p1;
wire   [15:0] trunc_ln674_2_fu_442_p1;
wire   [15:0] trunc_ln674_1_fu_438_p1;
wire   [11:0] trunc_ln674_fu_434_p1;
wire   [6:0] trunc_ln23_fu_490_p1;
wire   [26:0] cy_fu_513_p3;
wire   [26:0] cy1_fu_528_p2;
wire   [29:0] mul_fu_534_p3;
wire   [29:0] or_ln42_fu_546_p2;
wire   [29:0] or_ln42_1_fu_556_p2;
wire   [29:0] or_ln42_2_fu_566_p2;
wire   [29:0] or_ln42_3_fu_576_p2;
wire   [29:0] or_ln42_4_fu_586_p2;
wire   [29:0] or_ln42_5_fu_596_p2;
wire   [29:0] or_ln42_6_fu_606_p2;
wire   [31:0] zext_ln42_6_fu_602_p1;
wire   [31:0] zext_ln42_5_fu_592_p1;
wire   [31:0] zext_ln42_4_fu_582_p1;
wire   [31:0] zext_ln42_3_fu_572_p1;
wire   [31:0] zext_ln42_2_fu_562_p1;
wire   [31:0] zext_ln42_1_fu_552_p1;
wire   [31:0] zext_ln42_fu_542_p1;
wire   [253:0] tmp_5_fu_612_p9;
wire   [15:0] tmp_18_trunc_fu_521_p3;
wire   [15:0] tmp_trunc37_fu_637_p2;
wire   [15:0] trunc_ln674_15_fu_684_p1;
wire   [15:0] trunc_ln674_14_fu_680_p1;
wire   [15:0] trunc_ln674_13_fu_676_p1;
wire   [15:0] trunc_ln674_12_fu_672_p1;
wire   [15:0] trunc_ln674_11_fu_668_p1;
wire   [15:0] trunc_ln674_10_fu_664_p1;
wire   [15:0] trunc_ln674_9_fu_660_p1;
wire   [12:0] trunc_ln674_8_fu_656_p1;
wire   [8:0] ptmp_user_V_1_fu_718_p2;
wire   [25:0] add_ln223_fu_744_p2;
reg   [3:0] ap_NS_fsm;
wire    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state5_blk;
wire    regslice_both_out_V_data_V_U_apdone_blk;
wire    regslice_both_i_out_V_data_V_U_apdone_blk;
wire    regslice_both_q_out_V_data_V_U_apdone_blk;
wire    regslice_both_phase_V_data_V_U_apdone_blk;
reg    ap_block_state5;
wire    ap_CS_fsm_state5;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg   [255:0] out_r_TDATA_int_regslice;
reg    out_r_TVALID_int_regslice;
wire    out_r_TREADY_int_regslice;
wire    regslice_both_out_V_data_V_U_vld_out;
wire    regslice_both_out_V_keep_V_U_apdone_blk;
wire    regslice_both_out_V_keep_V_U_ack_in_dummy;
wire    regslice_both_out_V_keep_V_U_vld_out;
wire    regslice_both_out_V_strb_V_U_apdone_blk;
wire    regslice_both_out_V_strb_V_U_ack_in_dummy;
wire    regslice_both_out_V_strb_V_U_vld_out;
wire    regslice_both_out_V_user_V_U_apdone_blk;
reg   [7:0] out_r_TUSER_int_regslice;
wire    regslice_both_out_V_user_V_U_ack_in_dummy;
wire    regslice_both_out_V_user_V_U_vld_out;
wire    regslice_both_out_V_last_V_U_apdone_blk;
reg   [0:0] out_r_TLAST_int_regslice;
wire    regslice_both_out_V_last_V_U_ack_in_dummy;
wire    regslice_both_out_V_last_V_U_vld_out;
reg   [127:0] i_out_TDATA_int_regslice;
reg    i_out_TVALID_int_regslice;
wire    i_out_TREADY_int_regslice;
wire    regslice_both_i_out_V_data_V_U_vld_out;
wire    regslice_both_i_out_V_keep_V_U_apdone_blk;
wire    regslice_both_i_out_V_keep_V_U_ack_in_dummy;
wire    regslice_both_i_out_V_keep_V_U_vld_out;
wire    regslice_both_i_out_V_strb_V_U_apdone_blk;
wire    regslice_both_i_out_V_strb_V_U_ack_in_dummy;
wire    regslice_both_i_out_V_strb_V_U_vld_out;
wire    regslice_both_i_out_V_last_V_U_apdone_blk;
reg   [0:0] i_out_TLAST_int_regslice;
wire    regslice_both_i_out_V_last_V_U_ack_in_dummy;
wire    regslice_both_i_out_V_last_V_U_vld_out;
reg   [127:0] q_out_TDATA_int_regslice;
reg    q_out_TVALID_int_regslice;
wire    q_out_TREADY_int_regslice;
wire    regslice_both_q_out_V_data_V_U_vld_out;
wire    regslice_both_q_out_V_keep_V_U_apdone_blk;
wire    regslice_both_q_out_V_keep_V_U_ack_in_dummy;
wire    regslice_both_q_out_V_keep_V_U_vld_out;
wire    regslice_both_q_out_V_strb_V_U_apdone_blk;
wire    regslice_both_q_out_V_strb_V_U_ack_in_dummy;
wire    regslice_both_q_out_V_strb_V_U_vld_out;
wire    regslice_both_q_out_V_last_V_U_apdone_blk;
reg   [0:0] q_out_TLAST_int_regslice;
wire    regslice_both_q_out_V_last_V_U_ack_in_dummy;
wire    regslice_both_q_out_V_last_V_U_vld_out;
reg   [63:0] phase_TDATA_int_regslice;
reg    phase_TVALID_int_regslice;
wire    phase_TREADY_int_regslice;
wire    regslice_both_phase_V_data_V_U_vld_out;
wire    regslice_both_phase_V_keep_V_U_apdone_blk;
wire    regslice_both_phase_V_keep_V_U_ack_in_dummy;
wire    regslice_both_phase_V_keep_V_U_vld_out;
wire    regslice_both_phase_V_strb_V_U_apdone_blk;
wire    regslice_both_phase_V_strb_V_U_ack_in_dummy;
wire    regslice_both_phase_V_strb_V_U_vld_out;
wire    regslice_both_phase_V_user_V_U_apdone_blk;
reg   [15:0] phase_TUSER_int_regslice;
wire    regslice_both_phase_V_user_V_U_ack_in_dummy;
wire    regslice_both_phase_V_user_V_U_vld_out;
wire    regslice_both_phase_V_last_V_U_apdone_blk;
reg   [0:0] phase_TLAST_int_regslice;
wire    regslice_both_phase_V_last_V_U_ack_in_dummy;
wire    regslice_both_phase_V_last_V_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

iq_gen_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .max(max),
    .run(run)
);

iq_gen_regslice_both #(
    .DataWidth( 256 ))
regslice_both_out_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(out_r_TDATA_int_regslice),
    .vld_in(out_r_TVALID_int_regslice),
    .ack_in(out_r_TREADY_int_regslice),
    .data_out(out_r_TDATA),
    .vld_out(regslice_both_out_V_data_V_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_V_data_V_U_apdone_blk)
);

iq_gen_regslice_both #(
    .DataWidth( 32 ))
regslice_both_out_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(32'd0),
    .vld_in(out_r_TVALID_int_regslice),
    .ack_in(regslice_both_out_V_keep_V_U_ack_in_dummy),
    .data_out(out_r_TKEEP),
    .vld_out(regslice_both_out_V_keep_V_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_V_keep_V_U_apdone_blk)
);

iq_gen_regslice_both #(
    .DataWidth( 32 ))
regslice_both_out_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(32'd0),
    .vld_in(out_r_TVALID_int_regslice),
    .ack_in(regslice_both_out_V_strb_V_U_ack_in_dummy),
    .data_out(out_r_TSTRB),
    .vld_out(regslice_both_out_V_strb_V_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_V_strb_V_U_apdone_blk)
);

iq_gen_regslice_both #(
    .DataWidth( 8 ))
regslice_both_out_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(out_r_TUSER_int_regslice),
    .vld_in(out_r_TVALID_int_regslice),
    .ack_in(regslice_both_out_V_user_V_U_ack_in_dummy),
    .data_out(out_r_TUSER),
    .vld_out(regslice_both_out_V_user_V_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_V_user_V_U_apdone_blk)
);

iq_gen_regslice_both #(
    .DataWidth( 1 ))
regslice_both_out_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(out_r_TLAST_int_regslice),
    .vld_in(out_r_TVALID_int_regslice),
    .ack_in(regslice_both_out_V_last_V_U_ack_in_dummy),
    .data_out(out_r_TLAST),
    .vld_out(regslice_both_out_V_last_V_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_V_last_V_U_apdone_blk)
);

iq_gen_regslice_both #(
    .DataWidth( 128 ))
regslice_both_i_out_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(i_out_TDATA_int_regslice),
    .vld_in(i_out_TVALID_int_regslice),
    .ack_in(i_out_TREADY_int_regslice),
    .data_out(i_out_TDATA),
    .vld_out(regslice_both_i_out_V_data_V_U_vld_out),
    .ack_out(i_out_TREADY),
    .apdone_blk(regslice_both_i_out_V_data_V_U_apdone_blk)
);

iq_gen_regslice_both #(
    .DataWidth( 16 ))
regslice_both_i_out_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(16'd0),
    .vld_in(i_out_TVALID_int_regslice),
    .ack_in(regslice_both_i_out_V_keep_V_U_ack_in_dummy),
    .data_out(i_out_TKEEP),
    .vld_out(regslice_both_i_out_V_keep_V_U_vld_out),
    .ack_out(i_out_TREADY),
    .apdone_blk(regslice_both_i_out_V_keep_V_U_apdone_blk)
);

iq_gen_regslice_both #(
    .DataWidth( 16 ))
regslice_both_i_out_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(16'd0),
    .vld_in(i_out_TVALID_int_regslice),
    .ack_in(regslice_both_i_out_V_strb_V_U_ack_in_dummy),
    .data_out(i_out_TSTRB),
    .vld_out(regslice_both_i_out_V_strb_V_U_vld_out),
    .ack_out(i_out_TREADY),
    .apdone_blk(regslice_both_i_out_V_strb_V_U_apdone_blk)
);

iq_gen_regslice_both #(
    .DataWidth( 1 ))
regslice_both_i_out_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(i_out_TLAST_int_regslice),
    .vld_in(i_out_TVALID_int_regslice),
    .ack_in(regslice_both_i_out_V_last_V_U_ack_in_dummy),
    .data_out(i_out_TLAST),
    .vld_out(regslice_both_i_out_V_last_V_U_vld_out),
    .ack_out(i_out_TREADY),
    .apdone_blk(regslice_both_i_out_V_last_V_U_apdone_blk)
);

iq_gen_regslice_both #(
    .DataWidth( 128 ))
regslice_both_q_out_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(q_out_TDATA_int_regslice),
    .vld_in(q_out_TVALID_int_regslice),
    .ack_in(q_out_TREADY_int_regslice),
    .data_out(q_out_TDATA),
    .vld_out(regslice_both_q_out_V_data_V_U_vld_out),
    .ack_out(q_out_TREADY),
    .apdone_blk(regslice_both_q_out_V_data_V_U_apdone_blk)
);

iq_gen_regslice_both #(
    .DataWidth( 16 ))
regslice_both_q_out_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(16'd0),
    .vld_in(q_out_TVALID_int_regslice),
    .ack_in(regslice_both_q_out_V_keep_V_U_ack_in_dummy),
    .data_out(q_out_TKEEP),
    .vld_out(regslice_both_q_out_V_keep_V_U_vld_out),
    .ack_out(q_out_TREADY),
    .apdone_blk(regslice_both_q_out_V_keep_V_U_apdone_blk)
);

iq_gen_regslice_both #(
    .DataWidth( 16 ))
regslice_both_q_out_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(16'd0),
    .vld_in(q_out_TVALID_int_regslice),
    .ack_in(regslice_both_q_out_V_strb_V_U_ack_in_dummy),
    .data_out(q_out_TSTRB),
    .vld_out(regslice_both_q_out_V_strb_V_U_vld_out),
    .ack_out(q_out_TREADY),
    .apdone_blk(regslice_both_q_out_V_strb_V_U_apdone_blk)
);

iq_gen_regslice_both #(
    .DataWidth( 1 ))
regslice_both_q_out_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(q_out_TLAST_int_regslice),
    .vld_in(q_out_TVALID_int_regslice),
    .ack_in(regslice_both_q_out_V_last_V_U_ack_in_dummy),
    .data_out(q_out_TLAST),
    .vld_out(regslice_both_q_out_V_last_V_U_vld_out),
    .ack_out(q_out_TREADY),
    .apdone_blk(regslice_both_q_out_V_last_V_U_apdone_blk)
);

iq_gen_regslice_both #(
    .DataWidth( 64 ))
regslice_both_phase_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(phase_TDATA_int_regslice),
    .vld_in(phase_TVALID_int_regslice),
    .ack_in(phase_TREADY_int_regslice),
    .data_out(phase_TDATA),
    .vld_out(regslice_both_phase_V_data_V_U_vld_out),
    .ack_out(phase_TREADY),
    .apdone_blk(regslice_both_phase_V_data_V_U_apdone_blk)
);

iq_gen_regslice_both #(
    .DataWidth( 8 ))
regslice_both_phase_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(8'd0),
    .vld_in(phase_TVALID_int_regslice),
    .ack_in(regslice_both_phase_V_keep_V_U_ack_in_dummy),
    .data_out(phase_TKEEP),
    .vld_out(regslice_both_phase_V_keep_V_U_vld_out),
    .ack_out(phase_TREADY),
    .apdone_blk(regslice_both_phase_V_keep_V_U_apdone_blk)
);

iq_gen_regslice_both #(
    .DataWidth( 8 ))
regslice_both_phase_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(8'd0),
    .vld_in(phase_TVALID_int_regslice),
    .ack_in(regslice_both_phase_V_strb_V_U_ack_in_dummy),
    .data_out(phase_TSTRB),
    .vld_out(regslice_both_phase_V_strb_V_U_vld_out),
    .ack_out(phase_TREADY),
    .apdone_blk(regslice_both_phase_V_strb_V_U_apdone_blk)
);

iq_gen_regslice_both #(
    .DataWidth( 16 ))
regslice_both_phase_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(phase_TUSER_int_regslice),
    .vld_in(phase_TVALID_int_regslice),
    .ack_in(regslice_both_phase_V_user_V_U_ack_in_dummy),
    .data_out(phase_TUSER),
    .vld_out(regslice_both_phase_V_user_V_U_vld_out),
    .ack_out(phase_TREADY),
    .apdone_blk(regslice_both_phase_V_user_V_U_apdone_blk)
);

iq_gen_regslice_both #(
    .DataWidth( 1 ))
regslice_both_phase_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(phase_TLAST_int_regslice),
    .vld_in(phase_TVALID_int_regslice),
    .ack_in(regslice_both_phase_V_last_V_U_ack_in_dummy),
    .data_out(phase_TLAST),
    .vld_out(regslice_both_phase_V_last_V_U_vld_out),
    .ack_out(phase_TREADY),
    .apdone_blk(regslice_both_phase_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((grp_load_fu_276_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((grp_load_fu_276_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((grp_load_fu_276_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_V2_reg_264 <= 26'd0;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (run_assign_load_reg_857 == 1'd1))) begin
        i_V2_reg_264 <= i_V_reg_852;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_reg_777 <= empty_fu_397_p1;
        icmp_ln1057_reg_809 <= icmp_ln1057_fu_508_p2;
        ptmp_user_V_reg_782[8 : 1] <= ptmp_user_V_fu_405_p3[8 : 1];
        tmp_user_V_reg_798[7 : 1] <= tmp_user_V_fu_494_p3[7 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        i_V_reg_852 <= i_V_fu_750_p3;
        run_assign_load_reg_857 <= grp_load_fu_276_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        run_assign_fu_166 <= run;
        trunc_ln_reg_763 <= {{max[26:1]}};
    end
end

assign ap_ST_fsm_state1_blk = 1'b0;

always @ (*) begin
    if (((regslice_both_phase_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_q_out_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_i_out_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_out_V_data_V_U_apdone_blk == 1'b1))) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if (((grp_load_fu_276_p1 == 1'd0) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (run_assign_load_reg_857 == 1'd1))) begin
        ap_phi_mux_i_V2_phi_fu_268_p4 = i_V_reg_852;
    end else begin
        ap_phi_mux_i_V2_phi_fu_268_p4 = i_V2_reg_264;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        ap_sig_allocacmp_run_assign_load_1 = run;
    end else begin
        ap_sig_allocacmp_run_assign_load_1 = run_assign_fu_166;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_load_fu_276_p1 = run_assign_fu_166;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_load_fu_276_p1 = ap_sig_allocacmp_run_assign_load_1;
    end else begin
        grp_load_fu_276_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        i_out_TDATA_blk_n = i_out_TREADY_int_regslice;
    end else begin
        i_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1_01001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            i_out_TDATA_int_regslice = p_Result_6_7_fu_688_p10;
        end else if (((1'b0 == ap_block_pp0_stage0_01001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            i_out_TDATA_int_regslice = tmp2_data_V_3_7_fu_466_p10;
        end else begin
            i_out_TDATA_int_regslice = 'bx;
        end
    end else begin
        i_out_TDATA_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1_01001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            i_out_TLAST_int_regslice = tmp_last_V_fu_728_p2;
        end else if (((1'b0 == ap_block_pp0_stage0_01001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            i_out_TLAST_int_regslice = 1'd0;
        end else begin
            i_out_TLAST_int_regslice = 'bx;
        end
    end else begin
        i_out_TLAST_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        i_out_TVALID_int_regslice = 1'b1;
    end else begin
        i_out_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        out_r_TDATA_blk_n = out_r_TREADY_int_regslice;
    end else begin
        out_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1_01001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            out_r_TDATA_int_regslice = zext_ln392_1_fu_632_p1;
        end else if (((1'b0 == ap_block_pp0_stage0_01001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            out_r_TDATA_int_regslice = zext_ln392_fu_392_p1;
        end else begin
            out_r_TDATA_int_regslice = 'bx;
        end
    end else begin
        out_r_TDATA_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1_01001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            out_r_TLAST_int_regslice = tmp_last_V_fu_728_p2;
        end else if (((1'b0 == ap_block_pp0_stage0_01001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            out_r_TLAST_int_regslice = 1'd0;
        end else begin
            out_r_TLAST_int_regslice = 'bx;
        end
    end else begin
        out_r_TLAST_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1_01001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            out_r_TUSER_int_regslice = tmp_user_V_1_fu_712_p2;
        end else if (((1'b0 == ap_block_pp0_stage0_01001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            out_r_TUSER_int_regslice = tmp_user_V_fu_494_p3;
        end else begin
            out_r_TUSER_int_regslice = 'bx;
        end
    end else begin
        out_r_TUSER_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        out_r_TVALID_int_regslice = 1'b1;
    end else begin
        out_r_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        phase_TDATA_blk_n = phase_TREADY_int_regslice;
    end else begin
        phase_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1_01001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            phase_TDATA_int_regslice = p_Result_4_3_fu_643_p5;
        end else if (((1'b0 == ap_block_pp0_stage0_01001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            phase_TDATA_int_regslice = p_Result_1_3_fu_413_p9;
        end else begin
            phase_TDATA_int_regslice = 'bx;
        end
    end else begin
        phase_TDATA_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1_01001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            phase_TLAST_int_regslice = ptmp_last_V_fu_737_p2;
        end else if (((1'b0 == ap_block_pp0_stage0_01001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            phase_TLAST_int_regslice = 1'd0;
        end else begin
            phase_TLAST_int_regslice = 'bx;
        end
    end else begin
        phase_TLAST_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1_01001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            phase_TUSER_int_regslice = zext_ln21_1_fu_723_p1;
        end else if (((1'b0 == ap_block_pp0_stage0_01001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            phase_TUSER_int_regslice = zext_ln21_fu_503_p1;
        end else begin
            phase_TUSER_int_regslice = 'bx;
        end
    end else begin
        phase_TUSER_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        phase_TVALID_int_regslice = 1'b1;
    end else begin
        phase_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        q_out_TDATA_blk_n = q_out_TREADY_int_regslice;
    end else begin
        q_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1_01001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            q_out_TDATA_int_regslice = p_Result_6_7_fu_688_p10;
        end else if (((1'b0 == ap_block_pp0_stage0_01001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            q_out_TDATA_int_regslice = tmp2_data_V_3_7_fu_466_p10;
        end else begin
            q_out_TDATA_int_regslice = 'bx;
        end
    end else begin
        q_out_TDATA_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1_01001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            q_out_TLAST_int_regslice = tmp_last_V_fu_728_p2;
        end else if (((1'b0 == ap_block_pp0_stage0_01001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            q_out_TLAST_int_regslice = 1'd0;
        end else begin
            q_out_TLAST_int_regslice = 'bx;
        end
    end else begin
        q_out_TLAST_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        q_out_TVALID_int_regslice = 1'b1;
    end else begin
        q_out_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((grp_load_fu_276_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state5 : begin
            if ((~((regslice_both_phase_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_q_out_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_i_out_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_out_V_data_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln223_fu_744_p2 = (i_V2_reg_264 + 26'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((phase_TREADY_int_regslice == 1'b0) | (q_out_TREADY_int_regslice == 1'b0) | (i_out_TREADY_int_regslice == 1'b0) | (out_r_TREADY_int_regslice == 1'b0))) | ((ap_enable_reg_pp0_iter0 == 1'b1) & ((phase_TREADY_int_regslice == 1'b0) | (q_out_TREADY_int_regslice == 1'b0) | (i_out_TREADY_int_regslice == 1'b0) | (out_r_TREADY_int_regslice == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((phase_TREADY_int_regslice == 1'b0) | (q_out_TREADY_int_regslice == 1'b0) | (i_out_TREADY_int_regslice == 1'b0) | (out_r_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state4_io))) | ((ap_enable_reg_pp0_iter0 == 1'b1) & ((phase_TREADY_int_regslice == 1'b0) | (q_out_TREADY_int_regslice == 1'b0) | (i_out_TREADY_int_regslice == 1'b0) | (out_r_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state2_io))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((phase_TREADY_int_regslice == 1'b0) | (q_out_TREADY_int_regslice == 1'b0) | (i_out_TREADY_int_regslice == 1'b0) | (out_r_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state4_io))) | ((ap_enable_reg_pp0_iter0 == 1'b1) & ((phase_TREADY_int_regslice == 1'b0) | (q_out_TREADY_int_regslice == 1'b0) | (i_out_TREADY_int_regslice == 1'b0) | (out_r_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state2_io))));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((phase_TREADY_int_regslice == 1'b0) | (q_out_TREADY_int_regslice == 1'b0) | (i_out_TREADY_int_regslice == 1'b0) | (out_r_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((phase_TREADY_int_regslice == 1'b0) | (q_out_TREADY_int_regslice == 1'b0) | (i_out_TREADY_int_regslice == 1'b0) | (out_r_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state3_io)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((phase_TREADY_int_regslice == 1'b0) | (q_out_TREADY_int_regslice == 1'b0) | (i_out_TREADY_int_regslice == 1'b0) | (out_r_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state3_io)));
end

always @ (*) begin
    ap_block_state2_io = ((phase_TREADY_int_regslice == 1'b0) | (q_out_TREADY_int_regslice == 1'b0) | (i_out_TREADY_int_regslice == 1'b0) | (out_r_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((phase_TREADY_int_regslice == 1'b0) | (q_out_TREADY_int_regslice == 1'b0) | (i_out_TREADY_int_regslice == 1'b0) | (out_r_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state3_io = ((phase_TREADY_int_regslice == 1'b0) | (q_out_TREADY_int_regslice == 1'b0) | (i_out_TREADY_int_regslice == 1'b0) | (out_r_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage1_iter0 = ((phase_TREADY_int_regslice == 1'b0) | (q_out_TREADY_int_regslice == 1'b0) | (i_out_TREADY_int_regslice == 1'b0) | (out_r_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state4_io = ((phase_TREADY_int_regslice == 1'b0) | (q_out_TREADY_int_regslice == 1'b0) | (i_out_TREADY_int_regslice == 1'b0) | (out_r_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((phase_TREADY_int_regslice == 1'b0) | (q_out_TREADY_int_regslice == 1'b0) | (i_out_TREADY_int_regslice == 1'b0) | (out_r_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state5 = ((regslice_both_phase_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_q_out_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_i_out_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_out_V_data_V_U_apdone_blk == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign cy1_fu_528_p2 = (cy_fu_513_p3 | 27'd1);

assign cy_fu_513_p3 = {{i_V2_reg_264}, {1'd0}};

assign empty_fu_397_p1 = ap_phi_mux_i_V2_phi_fu_268_p4[14:0];

assign i_V_fu_750_p3 = ((icmp_ln1057_reg_809[0:0] == 1'b1) ? add_ln223_fu_744_p2 : 26'd0);

assign i_out_TVALID = regslice_both_i_out_V_data_V_U_vld_out;

assign icmp_ln1057_fu_508_p2 = ((ap_phi_mux_i_V2_phi_fu_268_p4 < trunc_ln_reg_763) ? 1'b1 : 1'b0);

assign mul2_fu_294_p3 = {{ap_phi_mux_i_V2_phi_fu_268_p4}, {4'd0}};

assign mul_fu_534_p3 = {{cy1_fu_528_p2}, {3'd0}};

assign or_ln25_1_fu_316_p2 = (mul2_fu_294_p3 | 30'd2);

assign or_ln25_2_fu_326_p2 = (mul2_fu_294_p3 | 30'd3);

assign or_ln25_3_fu_336_p2 = (mul2_fu_294_p3 | 30'd4);

assign or_ln25_4_fu_346_p2 = (mul2_fu_294_p3 | 30'd5);

assign or_ln25_5_fu_356_p2 = (mul2_fu_294_p3 | 30'd6);

assign or_ln25_6_fu_366_p2 = (mul2_fu_294_p3 | 30'd7);

assign or_ln25_fu_306_p2 = (mul2_fu_294_p3 | 30'd1);

assign or_ln42_1_fu_556_p2 = (mul_fu_534_p3 | 30'd2);

assign or_ln42_2_fu_566_p2 = (mul_fu_534_p3 | 30'd3);

assign or_ln42_3_fu_576_p2 = (mul_fu_534_p3 | 30'd4);

assign or_ln42_4_fu_586_p2 = (mul_fu_534_p3 | 30'd5);

assign or_ln42_5_fu_596_p2 = (mul_fu_534_p3 | 30'd6);

assign or_ln42_6_fu_606_p2 = (mul_fu_534_p3 | 30'd7);

assign or_ln42_fu_546_p2 = (mul_fu_534_p3 | 30'd1);

assign out_r_TVALID = regslice_both_out_V_data_V_U_vld_out;

assign p_Result_1_3_fu_413_p9 = {{{{{{{{empty_fu_397_p1}, {1'd0}}, {empty_fu_397_p1}}, {1'd0}}, {empty_fu_397_p1}}, {1'd0}}, {empty_fu_397_p1}}, {1'd0}};

assign p_Result_4_3_fu_643_p5 = {{{{tmp_trunc37_fu_637_p2}, {tmp_trunc37_fu_637_p2}}, {tmp_trunc37_fu_637_p2}}, {tmp_trunc37_fu_637_p2}};

assign p_Result_6_7_fu_688_p10 = {{{{{{{{{trunc_ln674_15_fu_684_p1}, {trunc_ln674_14_fu_680_p1}}, {trunc_ln674_13_fu_676_p1}}, {trunc_ln674_12_fu_672_p1}}, {trunc_ln674_11_fu_668_p1}}, {trunc_ln674_10_fu_664_p1}}, {trunc_ln674_9_fu_660_p1}}, {trunc_ln674_8_fu_656_p1}}, {3'd0}};

assign phase_TVALID = regslice_both_phase_V_data_V_U_vld_out;

assign ptmp_last_V_fu_737_p2 = ((ptmp_user_V_1_fu_718_p2 == 9'd511) ? 1'b1 : 1'b0);

assign ptmp_user_V_1_fu_718_p2 = (ptmp_user_V_reg_782 | 9'd1);

assign ptmp_user_V_fu_405_p3 = {{trunc_ln392_fu_401_p1}, {1'd0}};

assign q_out_TVALID = regslice_both_q_out_V_data_V_U_vld_out;

assign tmp2_data_V_3_7_fu_466_p10 = {{{{{{{{{trunc_ln674_7_fu_462_p1}, {trunc_ln674_6_fu_458_p1}}, {trunc_ln674_5_fu_454_p1}}, {trunc_ln674_4_fu_450_p1}}, {trunc_ln674_3_fu_446_p1}}, {trunc_ln674_2_fu_442_p1}}, {trunc_ln674_1_fu_438_p1}}, {trunc_ln674_fu_434_p1}}, {4'd0}};

assign tmp_18_trunc_fu_521_p3 = {{empty_reg_777}, {1'd0}};

assign tmp_1_fu_372_p9 = {{{{{{{{or_ln25_6_fu_366_p2}, {zext_ln25_6_fu_362_p1}}, {zext_ln25_5_fu_352_p1}}, {zext_ln25_4_fu_342_p1}}, {zext_ln25_3_fu_332_p1}}, {zext_ln25_2_fu_322_p1}}, {zext_ln25_1_fu_312_p1}}, {zext_ln25_fu_302_p1}};

assign tmp_5_fu_612_p9 = {{{{{{{{or_ln42_6_fu_606_p2}, {zext_ln42_6_fu_602_p1}}, {zext_ln42_5_fu_592_p1}}, {zext_ln42_4_fu_582_p1}}, {zext_ln42_3_fu_572_p1}}, {zext_ln42_2_fu_562_p1}}, {zext_ln42_1_fu_552_p1}}, {zext_ln42_fu_542_p1}};

assign tmp_last_V_fu_728_p2 = ((tmp_user_V_1_fu_712_p2 == 8'd255) ? 1'b1 : 1'b0);

assign tmp_trunc37_fu_637_p2 = (tmp_18_trunc_fu_521_p3 | 16'd1);

assign tmp_user_V_1_fu_712_p2 = (tmp_user_V_reg_798 | 8'd1);

assign tmp_user_V_fu_494_p3 = {{trunc_ln23_fu_490_p1}, {1'd0}};

assign trunc_ln23_fu_490_p1 = ap_phi_mux_i_V2_phi_fu_268_p4[6:0];

assign trunc_ln392_fu_401_p1 = ap_phi_mux_i_V2_phi_fu_268_p4[7:0];

assign trunc_ln674_10_fu_664_p1 = or_ln42_1_fu_556_p2[15:0];

assign trunc_ln674_11_fu_668_p1 = or_ln42_2_fu_566_p2[15:0];

assign trunc_ln674_12_fu_672_p1 = or_ln42_3_fu_576_p2[15:0];

assign trunc_ln674_13_fu_676_p1 = or_ln42_4_fu_586_p2[15:0];

assign trunc_ln674_14_fu_680_p1 = or_ln42_5_fu_596_p2[15:0];

assign trunc_ln674_15_fu_684_p1 = or_ln42_6_fu_606_p2[15:0];

assign trunc_ln674_1_fu_438_p1 = or_ln25_fu_306_p2[15:0];

assign trunc_ln674_2_fu_442_p1 = or_ln25_1_fu_316_p2[15:0];

assign trunc_ln674_3_fu_446_p1 = or_ln25_2_fu_326_p2[15:0];

assign trunc_ln674_4_fu_450_p1 = or_ln25_3_fu_336_p2[15:0];

assign trunc_ln674_5_fu_454_p1 = or_ln25_4_fu_346_p2[15:0];

assign trunc_ln674_6_fu_458_p1 = or_ln25_5_fu_356_p2[15:0];

assign trunc_ln674_7_fu_462_p1 = or_ln25_6_fu_366_p2[15:0];

assign trunc_ln674_8_fu_656_p1 = cy1_fu_528_p2[12:0];

assign trunc_ln674_9_fu_660_p1 = or_ln42_fu_546_p2[15:0];

assign trunc_ln674_fu_434_p1 = ap_phi_mux_i_V2_phi_fu_268_p4[11:0];

assign zext_ln21_1_fu_723_p1 = ptmp_user_V_1_fu_718_p2;

assign zext_ln21_fu_503_p1 = ptmp_user_V_fu_405_p3;

assign zext_ln25_1_fu_312_p1 = or_ln25_fu_306_p2;

assign zext_ln25_2_fu_322_p1 = or_ln25_1_fu_316_p2;

assign zext_ln25_3_fu_332_p1 = or_ln25_2_fu_326_p2;

assign zext_ln25_4_fu_342_p1 = or_ln25_3_fu_336_p2;

assign zext_ln25_5_fu_352_p1 = or_ln25_4_fu_346_p2;

assign zext_ln25_6_fu_362_p1 = or_ln25_5_fu_356_p2;

assign zext_ln25_fu_302_p1 = mul2_fu_294_p3;

assign zext_ln392_1_fu_632_p1 = tmp_5_fu_612_p9;

assign zext_ln392_fu_392_p1 = tmp_1_fu_372_p9;

assign zext_ln42_1_fu_552_p1 = or_ln42_fu_546_p2;

assign zext_ln42_2_fu_562_p1 = or_ln42_1_fu_556_p2;

assign zext_ln42_3_fu_572_p1 = or_ln42_2_fu_566_p2;

assign zext_ln42_4_fu_582_p1 = or_ln42_3_fu_576_p2;

assign zext_ln42_5_fu_592_p1 = or_ln42_4_fu_586_p2;

assign zext_ln42_6_fu_602_p1 = or_ln42_5_fu_596_p2;

assign zext_ln42_fu_542_p1 = mul_fu_534_p3;

always @ (posedge ap_clk) begin
    ptmp_user_V_reg_782[0] <= 1'b0;
    tmp_user_V_reg_798[0] <= 1'b0;
end


// synthesis translate_off
`include "iq_gen_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on

endmodule //iq_gen

