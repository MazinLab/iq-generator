// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="iq_gen_iq_gen,hls_ip_2021_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu28dr-ffvg1517-2-e,HLS_INPUT_CLOCK=1.818000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.130000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=315,HLS_SYN_LUT=994,HLS_VERSION=2021_1}" *)

module iq_gen (
// synthesis translate_off
    kernel_block,
// synthesis translate_on
        ap_clk,
        ap_rst_n,
        out_r_TDATA,
        out_r_TVALID,
        out_r_TREADY,
        out_r_TKEEP,
        out_r_TSTRB,
        out_r_TUSER,
        out_r_TLAST,
        i_out_TDATA,
        i_out_TVALID,
        i_out_TREADY,
        i_out_TKEEP,
        i_out_TSTRB,
        i_out_TLAST,
        q_out_TDATA,
        q_out_TVALID,
        q_out_TREADY,
        q_out_TKEEP,
        q_out_TSTRB,
        q_out_TLAST,
        phase_TDATA,
        phase_TVALID,
        phase_TREADY,
        phase_TKEEP,
        phase_TSTRB,
        phase_TUSER,
        phase_TLAST,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_pp0_stage0 = 5'd4;
parameter    ap_ST_fsm_pp0_stage1 = 5'd8;
parameter    ap_ST_fsm_state6 = 5'd16;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

// synthesis translate_off
output kernel_block;
// synthesis translate_on
input   ap_clk;
input   ap_rst_n;
output  [255:0] out_r_TDATA;
output   out_r_TVALID;
input   out_r_TREADY;
output  [31:0] out_r_TKEEP;
output  [31:0] out_r_TSTRB;
output  [7:0] out_r_TUSER;
output  [0:0] out_r_TLAST;
output  [127:0] i_out_TDATA;
output   i_out_TVALID;
input   i_out_TREADY;
output  [15:0] i_out_TKEEP;
output  [15:0] i_out_TSTRB;
output  [0:0] i_out_TLAST;
output  [127:0] q_out_TDATA;
output   q_out_TVALID;
input   q_out_TREADY;
output  [15:0] q_out_TKEEP;
output  [15:0] q_out_TSTRB;
output  [0:0] q_out_TLAST;
output  [63:0] phase_TDATA;
output   phase_TVALID;
input   phase_TREADY;
output  [7:0] phase_TKEEP;
output  [7:0] phase_TSTRB;
output  [15:0] phase_TUSER;
output  [0:0] phase_TLAST;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;

 reg    ap_rst_n_inv;
wire   [26:0] max;
reg    out_r_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
reg    ap_enable_reg_pp0_iter1;
reg    i_out_TDATA_blk_n;
reg    q_out_TDATA_blk_n;
reg    phase_TDATA_blk_n;
reg   [63:0] i2_reg_234;
reg   [26:0] max_read_reg_592;
wire    ap_CS_fsm_state1;
wire   [63:0] zext_ln69_fu_245_p1;
reg   [63:0] zext_ln69_reg_598;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln1057_1_fu_248_p2;
wire   [31:0] tmp_2_fu_257_p3;
reg   [31:0] tmp_2_reg_607;
reg    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state3_io;
reg    ap_block_state5_pp0_stage0_iter1;
reg    ap_block_state5_io;
reg    ap_block_pp0_stage0_11001;
wire   [255:0] p_Result_7_fu_307_p10;
wire   [15:0] empty_11_fu_330_p1;
reg   [15:0] empty_11_reg_624;
wire   [8:0] ptmp_user_V_fu_334_p1;
reg   [8:0] ptmp_user_V_reg_629;
wire   [63:0] p_Result_1_3_fu_338_p5;
wire   [127:0] tmp2_data_V_3_7_fu_383_p10;
wire   [7:0] tmp_user_V_fu_407_p1;
reg   [7:0] tmp_user_V_reg_645;
wire   [15:0] zext_ln73_fu_412_p1;
wire   [63:0] i_fu_417_p2;
reg   [63:0] i_reg_656;
wire   [255:0] p_Result_3_7_fu_463_p9;
reg    ap_block_state4_pp0_stage1_iter0;
reg    ap_block_state4_io;
reg    ap_block_pp0_stage1_11001;
wire   [63:0] p_Result_4_3_fu_489_p5;
wire   [127:0] p_Result_6_7_fu_534_p9;
wire   [7:0] tmp_user_V_1_fu_556_p2;
wire   [15:0] zext_ln73_1_fu_567_p1;
wire   [0:0] tmp_last_V_fu_572_p2;
wire   [0:0] ptmp_last_V_fu_581_p2;
wire   [0:0] icmp_ln1057_fu_588_p2;
reg   [0:0] icmp_ln1057_reg_700;
reg    ap_block_pp0_stage1_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_block_pp0_stage0_subdone;
reg   [63:0] ap_phi_mux_i2_phi_fu_238_p4;
reg    ap_block_pp0_stage0_01001;
reg    ap_block_pp0_stage1_01001;
wire   [28:0] empty_fu_253_p1;
wire   [31:0] or_ln75_6_fu_301_p2;
wire   [31:0] or_ln75_5_fu_295_p2;
wire   [31:0] or_ln75_4_fu_289_p2;
wire   [31:0] or_ln75_3_fu_283_p2;
wire   [31:0] or_ln75_2_fu_277_p2;
wire   [31:0] or_ln75_1_fu_271_p2;
wire   [31:0] or_ln75_fu_265_p2;
wire   [15:0] trunc_ln674_7_fu_379_p1;
wire   [15:0] trunc_ln674_6_fu_375_p1;
wire   [15:0] trunc_ln674_5_fu_371_p1;
wire   [15:0] trunc_ln674_4_fu_367_p1;
wire   [15:0] trunc_ln674_3_fu_363_p1;
wire   [15:0] trunc_ln674_2_fu_359_p1;
wire   [15:0] trunc_ln674_1_fu_355_p1;
wire   [12:0] trunc_ln674_fu_351_p1;
wire   [31:0] or_ln92_6_fu_458_p2;
wire   [31:0] or_ln92_5_fu_453_p2;
wire   [31:0] or_ln92_4_fu_448_p2;
wire   [31:0] or_ln92_3_fu_443_p2;
wire   [31:0] or_ln92_2_fu_438_p2;
wire   [31:0] or_ln92_1_fu_433_p2;
wire   [31:0] or_ln92_fu_428_p2;
wire   [31:0] empty_12_fu_423_p2;
wire   [15:0] or_ln93_fu_484_p2;
wire   [15:0] trunc_ln674_15_fu_530_p1;
wire   [15:0] trunc_ln674_14_fu_526_p1;
wire   [15:0] trunc_ln674_13_fu_522_p1;
wire   [15:0] trunc_ln674_12_fu_518_p1;
wire   [15:0] trunc_ln674_11_fu_514_p1;
wire   [15:0] trunc_ln674_10_fu_510_p1;
wire   [15:0] trunc_ln674_9_fu_506_p1;
wire   [15:0] trunc_ln674_8_fu_502_p1;
wire   [8:0] ptmp_user_V_1_fu_562_p2;
reg   [4:0] ap_NS_fsm;
wire    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state6_blk;
wire    regslice_both_out_V_data_V_U_apdone_blk;
wire    regslice_both_i_out_V_data_V_U_apdone_blk;
wire    regslice_both_q_out_V_data_V_U_apdone_blk;
wire    regslice_both_phase_V_data_V_U_apdone_blk;
reg    ap_block_state6;
wire    ap_CS_fsm_state6;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg   [255:0] out_r_TDATA_int_regslice;
reg    out_r_TVALID_int_regslice;
wire    out_r_TREADY_int_regslice;
wire    regslice_both_out_V_data_V_U_vld_out;
wire    regslice_both_out_V_keep_V_U_apdone_blk;
wire    regslice_both_out_V_keep_V_U_ack_in_dummy;
wire    regslice_both_out_V_keep_V_U_vld_out;
wire    regslice_both_out_V_strb_V_U_apdone_blk;
wire    regslice_both_out_V_strb_V_U_ack_in_dummy;
wire    regslice_both_out_V_strb_V_U_vld_out;
wire    regslice_both_out_V_user_V_U_apdone_blk;
reg   [7:0] out_r_TUSER_int_regslice;
wire    regslice_both_out_V_user_V_U_ack_in_dummy;
wire    regslice_both_out_V_user_V_U_vld_out;
wire    regslice_both_out_V_last_V_U_apdone_blk;
reg   [0:0] out_r_TLAST_int_regslice;
wire    regslice_both_out_V_last_V_U_ack_in_dummy;
wire    regslice_both_out_V_last_V_U_vld_out;
reg   [127:0] i_out_TDATA_int_regslice;
reg    i_out_TVALID_int_regslice;
wire    i_out_TREADY_int_regslice;
wire    regslice_both_i_out_V_data_V_U_vld_out;
wire    regslice_both_i_out_V_keep_V_U_apdone_blk;
wire    regslice_both_i_out_V_keep_V_U_ack_in_dummy;
wire    regslice_both_i_out_V_keep_V_U_vld_out;
wire    regslice_both_i_out_V_strb_V_U_apdone_blk;
wire    regslice_both_i_out_V_strb_V_U_ack_in_dummy;
wire    regslice_both_i_out_V_strb_V_U_vld_out;
wire    regslice_both_i_out_V_last_V_U_apdone_blk;
reg   [0:0] i_out_TLAST_int_regslice;
wire    regslice_both_i_out_V_last_V_U_ack_in_dummy;
wire    regslice_both_i_out_V_last_V_U_vld_out;
reg   [127:0] q_out_TDATA_int_regslice;
reg    q_out_TVALID_int_regslice;
wire    q_out_TREADY_int_regslice;
wire    regslice_both_q_out_V_data_V_U_vld_out;
wire    regslice_both_q_out_V_keep_V_U_apdone_blk;
wire    regslice_both_q_out_V_keep_V_U_ack_in_dummy;
wire    regslice_both_q_out_V_keep_V_U_vld_out;
wire    regslice_both_q_out_V_strb_V_U_apdone_blk;
wire    regslice_both_q_out_V_strb_V_U_ack_in_dummy;
wire    regslice_both_q_out_V_strb_V_U_vld_out;
wire    regslice_both_q_out_V_last_V_U_apdone_blk;
reg   [0:0] q_out_TLAST_int_regslice;
wire    regslice_both_q_out_V_last_V_U_ack_in_dummy;
wire    regslice_both_q_out_V_last_V_U_vld_out;
reg   [63:0] phase_TDATA_int_regslice;
reg    phase_TVALID_int_regslice;
wire    phase_TREADY_int_regslice;
wire    regslice_both_phase_V_data_V_U_vld_out;
wire    regslice_both_phase_V_keep_V_U_apdone_blk;
wire    regslice_both_phase_V_keep_V_U_ack_in_dummy;
wire    regslice_both_phase_V_keep_V_U_vld_out;
wire    regslice_both_phase_V_strb_V_U_apdone_blk;
wire    regslice_both_phase_V_strb_V_U_ack_in_dummy;
wire    regslice_both_phase_V_strb_V_U_vld_out;
wire    regslice_both_phase_V_user_V_U_apdone_blk;
reg   [15:0] phase_TUSER_int_regslice;
wire    regslice_both_phase_V_user_V_U_ack_in_dummy;
wire    regslice_both_phase_V_user_V_U_vld_out;
wire    regslice_both_phase_V_last_V_U_apdone_blk;
reg   [0:0] phase_TLAST_int_regslice;
wire    regslice_both_phase_V_last_V_U_ack_in_dummy;
wire    regslice_both_phase_V_last_V_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

iq_gen_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .max(max)
);

iq_gen_regslice_both #(
    .DataWidth( 256 ))
regslice_both_out_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(out_r_TDATA_int_regslice),
    .vld_in(out_r_TVALID_int_regslice),
    .ack_in(out_r_TREADY_int_regslice),
    .data_out(out_r_TDATA),
    .vld_out(regslice_both_out_V_data_V_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_V_data_V_U_apdone_blk)
);

iq_gen_regslice_both #(
    .DataWidth( 32 ))
regslice_both_out_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(32'd0),
    .vld_in(out_r_TVALID_int_regslice),
    .ack_in(regslice_both_out_V_keep_V_U_ack_in_dummy),
    .data_out(out_r_TKEEP),
    .vld_out(regslice_both_out_V_keep_V_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_V_keep_V_U_apdone_blk)
);

iq_gen_regslice_both #(
    .DataWidth( 32 ))
regslice_both_out_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(32'd0),
    .vld_in(out_r_TVALID_int_regslice),
    .ack_in(regslice_both_out_V_strb_V_U_ack_in_dummy),
    .data_out(out_r_TSTRB),
    .vld_out(regslice_both_out_V_strb_V_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_V_strb_V_U_apdone_blk)
);

iq_gen_regslice_both #(
    .DataWidth( 8 ))
regslice_both_out_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(out_r_TUSER_int_regslice),
    .vld_in(out_r_TVALID_int_regslice),
    .ack_in(regslice_both_out_V_user_V_U_ack_in_dummy),
    .data_out(out_r_TUSER),
    .vld_out(regslice_both_out_V_user_V_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_V_user_V_U_apdone_blk)
);

iq_gen_regslice_both #(
    .DataWidth( 1 ))
regslice_both_out_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(out_r_TLAST_int_regslice),
    .vld_in(out_r_TVALID_int_regslice),
    .ack_in(regslice_both_out_V_last_V_U_ack_in_dummy),
    .data_out(out_r_TLAST),
    .vld_out(regslice_both_out_V_last_V_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_V_last_V_U_apdone_blk)
);

iq_gen_regslice_both #(
    .DataWidth( 128 ))
regslice_both_i_out_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(i_out_TDATA_int_regslice),
    .vld_in(i_out_TVALID_int_regslice),
    .ack_in(i_out_TREADY_int_regslice),
    .data_out(i_out_TDATA),
    .vld_out(regslice_both_i_out_V_data_V_U_vld_out),
    .ack_out(i_out_TREADY),
    .apdone_blk(regslice_both_i_out_V_data_V_U_apdone_blk)
);

iq_gen_regslice_both #(
    .DataWidth( 16 ))
regslice_both_i_out_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(16'd0),
    .vld_in(i_out_TVALID_int_regslice),
    .ack_in(regslice_both_i_out_V_keep_V_U_ack_in_dummy),
    .data_out(i_out_TKEEP),
    .vld_out(regslice_both_i_out_V_keep_V_U_vld_out),
    .ack_out(i_out_TREADY),
    .apdone_blk(regslice_both_i_out_V_keep_V_U_apdone_blk)
);

iq_gen_regslice_both #(
    .DataWidth( 16 ))
regslice_both_i_out_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(16'd0),
    .vld_in(i_out_TVALID_int_regslice),
    .ack_in(regslice_both_i_out_V_strb_V_U_ack_in_dummy),
    .data_out(i_out_TSTRB),
    .vld_out(regslice_both_i_out_V_strb_V_U_vld_out),
    .ack_out(i_out_TREADY),
    .apdone_blk(regslice_both_i_out_V_strb_V_U_apdone_blk)
);

iq_gen_regslice_both #(
    .DataWidth( 1 ))
regslice_both_i_out_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(i_out_TLAST_int_regslice),
    .vld_in(i_out_TVALID_int_regslice),
    .ack_in(regslice_both_i_out_V_last_V_U_ack_in_dummy),
    .data_out(i_out_TLAST),
    .vld_out(regslice_both_i_out_V_last_V_U_vld_out),
    .ack_out(i_out_TREADY),
    .apdone_blk(regslice_both_i_out_V_last_V_U_apdone_blk)
);

iq_gen_regslice_both #(
    .DataWidth( 128 ))
regslice_both_q_out_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(q_out_TDATA_int_regslice),
    .vld_in(q_out_TVALID_int_regslice),
    .ack_in(q_out_TREADY_int_regslice),
    .data_out(q_out_TDATA),
    .vld_out(regslice_both_q_out_V_data_V_U_vld_out),
    .ack_out(q_out_TREADY),
    .apdone_blk(regslice_both_q_out_V_data_V_U_apdone_blk)
);

iq_gen_regslice_both #(
    .DataWidth( 16 ))
regslice_both_q_out_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(16'd0),
    .vld_in(q_out_TVALID_int_regslice),
    .ack_in(regslice_both_q_out_V_keep_V_U_ack_in_dummy),
    .data_out(q_out_TKEEP),
    .vld_out(regslice_both_q_out_V_keep_V_U_vld_out),
    .ack_out(q_out_TREADY),
    .apdone_blk(regslice_both_q_out_V_keep_V_U_apdone_blk)
);

iq_gen_regslice_both #(
    .DataWidth( 16 ))
regslice_both_q_out_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(16'd0),
    .vld_in(q_out_TVALID_int_regslice),
    .ack_in(regslice_both_q_out_V_strb_V_U_ack_in_dummy),
    .data_out(q_out_TSTRB),
    .vld_out(regslice_both_q_out_V_strb_V_U_vld_out),
    .ack_out(q_out_TREADY),
    .apdone_blk(regslice_both_q_out_V_strb_V_U_apdone_blk)
);

iq_gen_regslice_both #(
    .DataWidth( 1 ))
regslice_both_q_out_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(q_out_TLAST_int_regslice),
    .vld_in(q_out_TVALID_int_regslice),
    .ack_in(regslice_both_q_out_V_last_V_U_ack_in_dummy),
    .data_out(q_out_TLAST),
    .vld_out(regslice_both_q_out_V_last_V_U_vld_out),
    .ack_out(q_out_TREADY),
    .apdone_blk(regslice_both_q_out_V_last_V_U_apdone_blk)
);

iq_gen_regslice_both #(
    .DataWidth( 64 ))
regslice_both_phase_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(phase_TDATA_int_regslice),
    .vld_in(phase_TVALID_int_regslice),
    .ack_in(phase_TREADY_int_regslice),
    .data_out(phase_TDATA),
    .vld_out(regslice_both_phase_V_data_V_U_vld_out),
    .ack_out(phase_TREADY),
    .apdone_blk(regslice_both_phase_V_data_V_U_apdone_blk)
);

iq_gen_regslice_both #(
    .DataWidth( 8 ))
regslice_both_phase_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(8'd0),
    .vld_in(phase_TVALID_int_regslice),
    .ack_in(regslice_both_phase_V_keep_V_U_ack_in_dummy),
    .data_out(phase_TKEEP),
    .vld_out(regslice_both_phase_V_keep_V_U_vld_out),
    .ack_out(phase_TREADY),
    .apdone_blk(regslice_both_phase_V_keep_V_U_apdone_blk)
);

iq_gen_regslice_both #(
    .DataWidth( 8 ))
regslice_both_phase_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(8'd0),
    .vld_in(phase_TVALID_int_regslice),
    .ack_in(regslice_both_phase_V_strb_V_U_ack_in_dummy),
    .data_out(phase_TSTRB),
    .vld_out(regslice_both_phase_V_strb_V_U_vld_out),
    .ack_out(phase_TREADY),
    .apdone_blk(regslice_both_phase_V_strb_V_U_apdone_blk)
);

iq_gen_regslice_both #(
    .DataWidth( 16 ))
regslice_both_phase_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(phase_TUSER_int_regslice),
    .vld_in(phase_TVALID_int_regslice),
    .ack_in(regslice_both_phase_V_user_V_U_ack_in_dummy),
    .data_out(phase_TUSER),
    .vld_out(regslice_both_phase_V_user_V_U_vld_out),
    .ack_out(phase_TREADY),
    .apdone_blk(regslice_both_phase_V_user_V_U_apdone_blk)
);

iq_gen_regslice_both #(
    .DataWidth( 1 ))
regslice_both_phase_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(phase_TLAST_int_regslice),
    .vld_in(phase_TVALID_int_regslice),
    .ack_in(regslice_both_phase_V_last_V_U_ack_in_dummy),
    .data_out(phase_TLAST),
    .vld_out(regslice_both_phase_V_last_V_U_vld_out),
    .ack_out(phase_TREADY),
    .apdone_blk(regslice_both_phase_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln1057_1_fu_248_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((icmp_ln1057_1_fu_248_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1057_1_fu_248_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i2_reg_234 <= 64'd0;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1057_reg_700 == 1'd1))) begin
        i2_reg_234 <= i_reg_656;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_11_reg_624 <= empty_11_fu_330_p1;
        ptmp_user_V_reg_629 <= ptmp_user_V_fu_334_p1;
        tmp_2_reg_607[31 : 3] <= tmp_2_fu_257_p3[31 : 3];
        tmp_user_V_reg_645 <= tmp_user_V_fu_407_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_656 <= i_fu_417_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        icmp_ln1057_reg_700 <= icmp_ln1057_fu_588_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        max_read_reg_592 <= max;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        zext_ln69_reg_598[26 : 0] <= zext_ln69_fu_245_p1[26 : 0];
    end
end

assign ap_ST_fsm_state1_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if (((regslice_both_phase_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_q_out_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_i_out_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_out_V_data_V_U_apdone_blk == 1'b1))) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln1057_fu_588_p2 == 1'd0))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1057_reg_700 == 1'd1))) begin
        ap_phi_mux_i2_phi_fu_238_p4 = i_reg_656;
    end else begin
        ap_phi_mux_i2_phi_fu_238_p4 = i2_reg_234;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        i_out_TDATA_blk_n = i_out_TREADY_int_regslice;
    end else begin
        i_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1_01001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            i_out_TDATA_int_regslice = p_Result_6_7_fu_534_p9;
        end else if (((1'b0 == ap_block_pp0_stage0_01001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            i_out_TDATA_int_regslice = tmp2_data_V_3_7_fu_383_p10;
        end else begin
            i_out_TDATA_int_regslice = 'bx;
        end
    end else begin
        i_out_TDATA_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1_01001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            i_out_TLAST_int_regslice = tmp_last_V_fu_572_p2;
        end else if (((1'b0 == ap_block_pp0_stage0_01001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            i_out_TLAST_int_regslice = 1'd0;
        end else begin
            i_out_TLAST_int_regslice = 'bx;
        end
    end else begin
        i_out_TLAST_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        i_out_TVALID_int_regslice = 1'b1;
    end else begin
        i_out_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        out_r_TDATA_blk_n = out_r_TREADY_int_regslice;
    end else begin
        out_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1_01001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            out_r_TDATA_int_regslice = p_Result_3_7_fu_463_p9;
        end else if (((1'b0 == ap_block_pp0_stage0_01001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            out_r_TDATA_int_regslice = p_Result_7_fu_307_p10;
        end else begin
            out_r_TDATA_int_regslice = 'bx;
        end
    end else begin
        out_r_TDATA_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1_01001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            out_r_TLAST_int_regslice = tmp_last_V_fu_572_p2;
        end else if (((1'b0 == ap_block_pp0_stage0_01001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            out_r_TLAST_int_regslice = 1'd0;
        end else begin
            out_r_TLAST_int_regslice = 'bx;
        end
    end else begin
        out_r_TLAST_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1_01001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            out_r_TUSER_int_regslice = tmp_user_V_1_fu_556_p2;
        end else if (((1'b0 == ap_block_pp0_stage0_01001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            out_r_TUSER_int_regslice = tmp_user_V_fu_407_p1;
        end else begin
            out_r_TUSER_int_regslice = 'bx;
        end
    end else begin
        out_r_TUSER_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        out_r_TVALID_int_regslice = 1'b1;
    end else begin
        out_r_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        phase_TDATA_blk_n = phase_TREADY_int_regslice;
    end else begin
        phase_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1_01001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            phase_TDATA_int_regslice = p_Result_4_3_fu_489_p5;
        end else if (((1'b0 == ap_block_pp0_stage0_01001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            phase_TDATA_int_regslice = p_Result_1_3_fu_338_p5;
        end else begin
            phase_TDATA_int_regslice = 'bx;
        end
    end else begin
        phase_TDATA_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1_01001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            phase_TLAST_int_regslice = ptmp_last_V_fu_581_p2;
        end else if (((1'b0 == ap_block_pp0_stage0_01001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            phase_TLAST_int_regslice = 1'd0;
        end else begin
            phase_TLAST_int_regslice = 'bx;
        end
    end else begin
        phase_TLAST_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1_01001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            phase_TUSER_int_regslice = zext_ln73_1_fu_567_p1;
        end else if (((1'b0 == ap_block_pp0_stage0_01001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            phase_TUSER_int_regslice = zext_ln73_fu_412_p1;
        end else begin
            phase_TUSER_int_regslice = 'bx;
        end
    end else begin
        phase_TUSER_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        phase_TVALID_int_regslice = 1'b1;
    end else begin
        phase_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        q_out_TDATA_blk_n = q_out_TREADY_int_regslice;
    end else begin
        q_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1_01001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            q_out_TDATA_int_regslice = p_Result_6_7_fu_534_p9;
        end else if (((1'b0 == ap_block_pp0_stage0_01001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            q_out_TDATA_int_regslice = tmp2_data_V_3_7_fu_383_p10;
        end else begin
            q_out_TDATA_int_regslice = 'bx;
        end
    end else begin
        q_out_TDATA_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1_01001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            q_out_TLAST_int_regslice = tmp_last_V_fu_572_p2;
        end else if (((1'b0 == ap_block_pp0_stage0_01001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            q_out_TLAST_int_regslice = 1'd0;
        end else begin
            q_out_TLAST_int_regslice = 'bx;
        end
    end else begin
        q_out_TLAST_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        q_out_TVALID_int_regslice = 1'b1;
    end else begin
        q_out_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln1057_1_fu_248_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state6 : begin
            if ((~((regslice_both_phase_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_q_out_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_i_out_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_out_V_data_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((phase_TREADY_int_regslice == 1'b0) | (q_out_TREADY_int_regslice == 1'b0) | (i_out_TREADY_int_regslice == 1'b0) | (out_r_TREADY_int_regslice == 1'b0))) | ((ap_enable_reg_pp0_iter0 == 1'b1) & ((phase_TREADY_int_regslice == 1'b0) | (q_out_TREADY_int_regslice == 1'b0) | (i_out_TREADY_int_regslice == 1'b0) | (out_r_TREADY_int_regslice == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((phase_TREADY_int_regslice == 1'b0) | (q_out_TREADY_int_regslice == 1'b0) | (i_out_TREADY_int_regslice == 1'b0) | (out_r_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state5_io))) | ((ap_enable_reg_pp0_iter0 == 1'b1) & ((phase_TREADY_int_regslice == 1'b0) | (q_out_TREADY_int_regslice == 1'b0) | (i_out_TREADY_int_regslice == 1'b0) | (out_r_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state3_io))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((phase_TREADY_int_regslice == 1'b0) | (q_out_TREADY_int_regslice == 1'b0) | (i_out_TREADY_int_regslice == 1'b0) | (out_r_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state5_io))) | ((ap_enable_reg_pp0_iter0 == 1'b1) & ((phase_TREADY_int_regslice == 1'b0) | (q_out_TREADY_int_regslice == 1'b0) | (i_out_TREADY_int_regslice == 1'b0) | (out_r_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state3_io))));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((phase_TREADY_int_regslice == 1'b0) | (q_out_TREADY_int_regslice == 1'b0) | (i_out_TREADY_int_regslice == 1'b0) | (out_r_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((phase_TREADY_int_regslice == 1'b0) | (q_out_TREADY_int_regslice == 1'b0) | (i_out_TREADY_int_regslice == 1'b0) | (out_r_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state4_io)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((phase_TREADY_int_regslice == 1'b0) | (q_out_TREADY_int_regslice == 1'b0) | (i_out_TREADY_int_regslice == 1'b0) | (out_r_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state4_io)));
end

always @ (*) begin
    ap_block_state3_io = ((phase_TREADY_int_regslice == 1'b0) | (q_out_TREADY_int_regslice == 1'b0) | (i_out_TREADY_int_regslice == 1'b0) | (out_r_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter0 = ((phase_TREADY_int_regslice == 1'b0) | (q_out_TREADY_int_regslice == 1'b0) | (i_out_TREADY_int_regslice == 1'b0) | (out_r_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state4_io = ((phase_TREADY_int_regslice == 1'b0) | (q_out_TREADY_int_regslice == 1'b0) | (i_out_TREADY_int_regslice == 1'b0) | (out_r_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage1_iter0 = ((phase_TREADY_int_regslice == 1'b0) | (q_out_TREADY_int_regslice == 1'b0) | (i_out_TREADY_int_regslice == 1'b0) | (out_r_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state5_io = ((phase_TREADY_int_regslice == 1'b0) | (q_out_TREADY_int_regslice == 1'b0) | (i_out_TREADY_int_regslice == 1'b0) | (out_r_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter1 = ((phase_TREADY_int_regslice == 1'b0) | (q_out_TREADY_int_regslice == 1'b0) | (i_out_TREADY_int_regslice == 1'b0) | (out_r_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state6 = ((regslice_both_phase_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_q_out_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_i_out_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_out_V_data_V_U_apdone_blk == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign empty_11_fu_330_p1 = ap_phi_mux_i2_phi_fu_238_p4[15:0];

assign empty_12_fu_423_p2 = (tmp_2_reg_607 | 32'd8);

assign empty_fu_253_p1 = ap_phi_mux_i2_phi_fu_238_p4[28:0];

assign i_fu_417_p2 = (ap_phi_mux_i2_phi_fu_238_p4 + 64'd2);

assign i_out_TVALID = regslice_both_i_out_V_data_V_U_vld_out;

assign icmp_ln1057_1_fu_248_p2 = ((max_read_reg_592 == 27'd0) ? 1'b1 : 1'b0);

assign icmp_ln1057_fu_588_p2 = ((i_reg_656 < zext_ln69_reg_598) ? 1'b1 : 1'b0);

assign or_ln75_1_fu_271_p2 = (tmp_2_fu_257_p3 | 32'd2);

assign or_ln75_2_fu_277_p2 = (tmp_2_fu_257_p3 | 32'd3);

assign or_ln75_3_fu_283_p2 = (tmp_2_fu_257_p3 | 32'd4);

assign or_ln75_4_fu_289_p2 = (tmp_2_fu_257_p3 | 32'd5);

assign or_ln75_5_fu_295_p2 = (tmp_2_fu_257_p3 | 32'd6);

assign or_ln75_6_fu_301_p2 = (tmp_2_fu_257_p3 | 32'd7);

assign or_ln75_fu_265_p2 = (tmp_2_fu_257_p3 | 32'd1);

assign or_ln92_1_fu_433_p2 = (tmp_2_reg_607 | 32'd10);

assign or_ln92_2_fu_438_p2 = (tmp_2_reg_607 | 32'd11);

assign or_ln92_3_fu_443_p2 = (tmp_2_reg_607 | 32'd12);

assign or_ln92_4_fu_448_p2 = (tmp_2_reg_607 | 32'd13);

assign or_ln92_5_fu_453_p2 = (tmp_2_reg_607 | 32'd14);

assign or_ln92_6_fu_458_p2 = (tmp_2_reg_607 | 32'd15);

assign or_ln92_fu_428_p2 = (tmp_2_reg_607 | 32'd9);

assign or_ln93_fu_484_p2 = (empty_11_reg_624 | 16'd1);

assign out_r_TVALID = regslice_both_out_V_data_V_U_vld_out;

assign p_Result_1_3_fu_338_p5 = {{{{empty_11_fu_330_p1}, {empty_11_fu_330_p1}}, {empty_11_fu_330_p1}}, {empty_11_fu_330_p1}};

assign p_Result_3_7_fu_463_p9 = {{{{{{{{or_ln92_6_fu_458_p2}, {or_ln92_5_fu_453_p2}}, {or_ln92_4_fu_448_p2}}, {or_ln92_3_fu_443_p2}}, {or_ln92_2_fu_438_p2}}, {or_ln92_1_fu_433_p2}}, {or_ln92_fu_428_p2}}, {empty_12_fu_423_p2}};

assign p_Result_4_3_fu_489_p5 = {{{{or_ln93_fu_484_p2}, {or_ln93_fu_484_p2}}, {or_ln93_fu_484_p2}}, {or_ln93_fu_484_p2}};

assign p_Result_6_7_fu_534_p9 = {{{{{{{{trunc_ln674_15_fu_530_p1}, {trunc_ln674_14_fu_526_p1}}, {trunc_ln674_13_fu_522_p1}}, {trunc_ln674_12_fu_518_p1}}, {trunc_ln674_11_fu_514_p1}}, {trunc_ln674_10_fu_510_p1}}, {trunc_ln674_9_fu_506_p1}}, {trunc_ln674_8_fu_502_p1}};

assign p_Result_7_fu_307_p10 = {{{{{{{{{or_ln75_6_fu_301_p2}, {or_ln75_5_fu_295_p2}}, {or_ln75_4_fu_289_p2}}, {or_ln75_3_fu_283_p2}}, {or_ln75_2_fu_277_p2}}, {or_ln75_1_fu_271_p2}}, {or_ln75_fu_265_p2}}, {empty_fu_253_p1}}, {3'd0}};

assign phase_TVALID = regslice_both_phase_V_data_V_U_vld_out;

assign ptmp_last_V_fu_581_p2 = ((ptmp_user_V_1_fu_562_p2 == 9'd511) ? 1'b1 : 1'b0);

assign ptmp_user_V_1_fu_562_p2 = (ptmp_user_V_reg_629 | 9'd1);

assign ptmp_user_V_fu_334_p1 = ap_phi_mux_i2_phi_fu_238_p4[8:0];

assign q_out_TVALID = regslice_both_q_out_V_data_V_U_vld_out;

assign tmp2_data_V_3_7_fu_383_p10 = {{{{{{{{{trunc_ln674_7_fu_379_p1}, {trunc_ln674_6_fu_375_p1}}, {trunc_ln674_5_fu_371_p1}}, {trunc_ln674_4_fu_367_p1}}, {trunc_ln674_3_fu_363_p1}}, {trunc_ln674_2_fu_359_p1}}, {trunc_ln674_1_fu_355_p1}}, {trunc_ln674_fu_351_p1}}, {3'd0}};

assign tmp_2_fu_257_p3 = {{empty_fu_253_p1}, {3'd0}};

assign tmp_last_V_fu_572_p2 = ((tmp_user_V_1_fu_556_p2 == 8'd255) ? 1'b1 : 1'b0);

assign tmp_user_V_1_fu_556_p2 = (tmp_user_V_reg_645 | 8'd1);

assign tmp_user_V_fu_407_p1 = ap_phi_mux_i2_phi_fu_238_p4[7:0];

assign trunc_ln674_10_fu_510_p1 = or_ln92_1_fu_433_p2[15:0];

assign trunc_ln674_11_fu_514_p1 = or_ln92_2_fu_438_p2[15:0];

assign trunc_ln674_12_fu_518_p1 = or_ln92_3_fu_443_p2[15:0];

assign trunc_ln674_13_fu_522_p1 = or_ln92_4_fu_448_p2[15:0];

assign trunc_ln674_14_fu_526_p1 = or_ln92_5_fu_453_p2[15:0];

assign trunc_ln674_15_fu_530_p1 = or_ln92_6_fu_458_p2[15:0];

assign trunc_ln674_1_fu_355_p1 = or_ln75_fu_265_p2[15:0];

assign trunc_ln674_2_fu_359_p1 = or_ln75_1_fu_271_p2[15:0];

assign trunc_ln674_3_fu_363_p1 = or_ln75_2_fu_277_p2[15:0];

assign trunc_ln674_4_fu_367_p1 = or_ln75_3_fu_283_p2[15:0];

assign trunc_ln674_5_fu_371_p1 = or_ln75_4_fu_289_p2[15:0];

assign trunc_ln674_6_fu_375_p1 = or_ln75_5_fu_295_p2[15:0];

assign trunc_ln674_7_fu_379_p1 = or_ln75_6_fu_301_p2[15:0];

assign trunc_ln674_8_fu_502_p1 = empty_12_fu_423_p2[15:0];

assign trunc_ln674_9_fu_506_p1 = or_ln92_fu_428_p2[15:0];

assign trunc_ln674_fu_351_p1 = ap_phi_mux_i2_phi_fu_238_p4[12:0];

assign zext_ln69_fu_245_p1 = max_read_reg_592;

assign zext_ln73_1_fu_567_p1 = ptmp_user_V_1_fu_562_p2;

assign zext_ln73_fu_412_p1 = ptmp_user_V_fu_334_p1;

always @ (posedge ap_clk) begin
    zext_ln69_reg_598[63:27] <= 37'b0000000000000000000000000000000000000;
    tmp_2_reg_607[2:0] <= 3'b000;
end


// synthesis translate_off
`include "iq_gen_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on

endmodule //iq_gen

