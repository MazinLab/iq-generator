// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="iq_gen_iq_gen,hls_ip_2021_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu28dr-ffvg1517-2-e,HLS_INPUT_CLOCK=1.818000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.367812,HLS_SYN_LAT=134217858,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=118,HLS_SYN_LUT=520,HLS_VERSION=2021_1}" *)

module iq_gen (
// synthesis translate_off
    kernel_block,
// synthesis translate_on
        ap_clk,
        ap_rst_n,
        out_r_TDATA,
        out_r_TVALID,
        out_r_TREADY,
        out_r_TKEEP,
        out_r_TSTRB,
        out_r_TUSER,
        out_r_TLAST,
        i_out_TDATA,
        i_out_TVALID,
        i_out_TREADY,
        i_out_TKEEP,
        i_out_TSTRB,
        i_out_TLAST,
        q_out_TDATA,
        q_out_TVALID,
        q_out_TREADY,
        q_out_TKEEP,
        q_out_TSTRB,
        q_out_TLAST,
        phase_TDATA,
        phase_TVALID,
        phase_TREADY,
        phase_TKEEP,
        phase_TSTRB,
        phase_TUSER,
        phase_TLAST,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

// synthesis translate_off
output kernel_block;
// synthesis translate_on
input   ap_clk;
input   ap_rst_n;
output  [255:0] out_r_TDATA;
output   out_r_TVALID;
input   out_r_TREADY;
output  [31:0] out_r_TKEEP;
output  [31:0] out_r_TSTRB;
output  [7:0] out_r_TUSER;
output  [0:0] out_r_TLAST;
output  [127:0] i_out_TDATA;
output   i_out_TVALID;
input   i_out_TREADY;
output  [15:0] i_out_TKEEP;
output  [15:0] i_out_TSTRB;
output  [0:0] i_out_TLAST;
output  [127:0] q_out_TDATA;
output   q_out_TVALID;
input   q_out_TREADY;
output  [15:0] q_out_TKEEP;
output  [15:0] q_out_TSTRB;
output  [0:0] q_out_TLAST;
output  [63:0] phase_TDATA;
output   phase_TVALID;
input   phase_TREADY;
output  [7:0] phase_TKEEP;
output  [7:0] phase_TSTRB;
output  [15:0] phase_TUSER;
output  [0:0] phase_TLAST;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;

 reg    ap_rst_n_inv;
wire   [19:0] max;
wire    run;
reg    out_r_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    i_out_TDATA_blk_n;
reg    q_out_TDATA_blk_n;
reg    phase_TDATA_blk_n;
reg   [28:0] i_V_41_reg_230;
reg   [0:0] grp_load_fu_241_p1;
wire    ap_CS_fsm_state1;
wire   [28:0] p_max_fu_249_p3;
reg   [28:0] p_max_reg_462;
wire   [7:0] iq_user_fu_261_p1;
reg    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state2_io;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state3_io;
reg    ap_block_pp0_stage0_11001;
wire   [127:0] p_Result_3_7_fu_388_p10;
wire   [0:0] tmp_last_V_fu_417_p2;
wire   [0:0] ptmp_last_V_fu_426_p2;
wire   [28:0] i_V_2_fu_444_p3;
reg    ap_block_pp0_stage0_subdone;
reg    ap_predicate_tran3to4_state2;
reg    ap_condition_pp0_flush_enable;
reg   [0:0] run_assign_fu_136;
reg   [0:0] ap_sig_allocacmp_p_run;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] mul_fu_266_p3;
wire   [31:0] or_ln50_6_fu_310_p2;
wire   [31:0] or_ln50_5_fu_304_p2;
wire   [31:0] or_ln50_4_fu_298_p2;
wire   [31:0] or_ln50_3_fu_292_p2;
wire   [31:0] or_ln50_2_fu_286_p2;
wire   [31:0] or_ln50_1_fu_280_p2;
wire   [31:0] or_ln50_fu_274_p2;
wire   [15:0] empty_fu_339_p1;
wire   [15:0] trunc_ln674_7_fu_384_p1;
wire   [15:0] trunc_ln674_6_fu_380_p1;
wire   [15:0] trunc_ln674_5_fu_376_p1;
wire   [15:0] trunc_ln674_4_fu_372_p1;
wire   [15:0] trunc_ln674_3_fu_368_p1;
wire   [15:0] trunc_ln674_2_fu_364_p1;
wire   [15:0] trunc_ln674_1_fu_360_p1;
wire   [12:0] trunc_ln674_fu_356_p1;
wire   [8:0] phase_user_fu_257_p1;
wire   [0:0] icmp_ln1049_fu_433_p2;
wire   [28:0] i_V_fu_438_p2;
reg   [2:0] ap_NS_fsm;
wire    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state4_blk;
wire    regslice_both_out_V_data_V_U_apdone_blk;
wire    regslice_both_i_out_V_data_V_U_apdone_blk;
wire    regslice_both_q_out_V_data_V_U_apdone_blk;
wire    regslice_both_phase_V_data_V_U_apdone_blk;
reg    ap_block_state4;
wire    ap_CS_fsm_state4;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [255:0] out_r_TDATA_int_regslice;
reg    out_r_TVALID_int_regslice;
wire    out_r_TREADY_int_regslice;
wire    regslice_both_out_V_data_V_U_vld_out;
wire    regslice_both_out_V_keep_V_U_apdone_blk;
wire    regslice_both_out_V_keep_V_U_ack_in_dummy;
wire    regslice_both_out_V_keep_V_U_vld_out;
wire    regslice_both_out_V_strb_V_U_apdone_blk;
wire    regslice_both_out_V_strb_V_U_ack_in_dummy;
wire    regslice_both_out_V_strb_V_U_vld_out;
wire    regslice_both_out_V_user_V_U_apdone_blk;
wire    regslice_both_out_V_user_V_U_ack_in_dummy;
wire    regslice_both_out_V_user_V_U_vld_out;
wire    regslice_both_out_V_last_V_U_apdone_blk;
wire    regslice_both_out_V_last_V_U_ack_in_dummy;
wire    regslice_both_out_V_last_V_U_vld_out;
reg    i_out_TVALID_int_regslice;
wire    i_out_TREADY_int_regslice;
wire    regslice_both_i_out_V_data_V_U_vld_out;
wire    regslice_both_i_out_V_keep_V_U_apdone_blk;
wire    regslice_both_i_out_V_keep_V_U_ack_in_dummy;
wire    regslice_both_i_out_V_keep_V_U_vld_out;
wire    regslice_both_i_out_V_strb_V_U_apdone_blk;
wire    regslice_both_i_out_V_strb_V_U_ack_in_dummy;
wire    regslice_both_i_out_V_strb_V_U_vld_out;
wire    regslice_both_i_out_V_last_V_U_apdone_blk;
wire    regslice_both_i_out_V_last_V_U_ack_in_dummy;
wire    regslice_both_i_out_V_last_V_U_vld_out;
reg    q_out_TVALID_int_regslice;
wire    q_out_TREADY_int_regslice;
wire    regslice_both_q_out_V_data_V_U_vld_out;
wire    regslice_both_q_out_V_keep_V_U_apdone_blk;
wire    regslice_both_q_out_V_keep_V_U_ack_in_dummy;
wire    regslice_both_q_out_V_keep_V_U_vld_out;
wire    regslice_both_q_out_V_strb_V_U_apdone_blk;
wire    regslice_both_q_out_V_strb_V_U_ack_in_dummy;
wire    regslice_both_q_out_V_strb_V_U_vld_out;
wire    regslice_both_q_out_V_last_V_U_apdone_blk;
wire    regslice_both_q_out_V_last_V_U_ack_in_dummy;
wire    regslice_both_q_out_V_last_V_U_vld_out;
wire   [63:0] phase_TDATA_int_regslice;
reg    phase_TVALID_int_regslice;
wire    phase_TREADY_int_regslice;
wire    regslice_both_phase_V_data_V_U_vld_out;
wire    regslice_both_phase_V_keep_V_U_apdone_blk;
wire    regslice_both_phase_V_keep_V_U_ack_in_dummy;
wire    regslice_both_phase_V_keep_V_U_vld_out;
wire    regslice_both_phase_V_strb_V_U_apdone_blk;
wire    regslice_both_phase_V_strb_V_U_ack_in_dummy;
wire    regslice_both_phase_V_strb_V_U_vld_out;
wire    regslice_both_phase_V_user_V_U_apdone_blk;
wire   [15:0] phase_TUSER_int_regslice;
wire    regslice_both_phase_V_user_V_U_ack_in_dummy;
wire    regslice_both_phase_V_user_V_U_vld_out;
wire    regslice_both_phase_V_last_V_U_apdone_blk;
wire   [0:0] phase_TLAST_int_regslice;
wire    regslice_both_phase_V_last_V_U_ack_in_dummy;
wire    regslice_both_phase_V_last_V_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

iq_gen_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .max(max),
    .run(run)
);

iq_gen_regslice_both #(
    .DataWidth( 256 ))
regslice_both_out_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(out_r_TDATA_int_regslice),
    .vld_in(out_r_TVALID_int_regslice),
    .ack_in(out_r_TREADY_int_regslice),
    .data_out(out_r_TDATA),
    .vld_out(regslice_both_out_V_data_V_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_V_data_V_U_apdone_blk)
);

iq_gen_regslice_both #(
    .DataWidth( 32 ))
regslice_both_out_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(32'd0),
    .vld_in(out_r_TVALID_int_regslice),
    .ack_in(regslice_both_out_V_keep_V_U_ack_in_dummy),
    .data_out(out_r_TKEEP),
    .vld_out(regslice_both_out_V_keep_V_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_V_keep_V_U_apdone_blk)
);

iq_gen_regslice_both #(
    .DataWidth( 32 ))
regslice_both_out_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(32'd0),
    .vld_in(out_r_TVALID_int_regslice),
    .ack_in(regslice_both_out_V_strb_V_U_ack_in_dummy),
    .data_out(out_r_TSTRB),
    .vld_out(regslice_both_out_V_strb_V_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_V_strb_V_U_apdone_blk)
);

iq_gen_regslice_both #(
    .DataWidth( 8 ))
regslice_both_out_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(iq_user_fu_261_p1),
    .vld_in(out_r_TVALID_int_regslice),
    .ack_in(regslice_both_out_V_user_V_U_ack_in_dummy),
    .data_out(out_r_TUSER),
    .vld_out(regslice_both_out_V_user_V_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_V_user_V_U_apdone_blk)
);

iq_gen_regslice_both #(
    .DataWidth( 1 ))
regslice_both_out_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_last_V_fu_417_p2),
    .vld_in(out_r_TVALID_int_regslice),
    .ack_in(regslice_both_out_V_last_V_U_ack_in_dummy),
    .data_out(out_r_TLAST),
    .vld_out(regslice_both_out_V_last_V_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_V_last_V_U_apdone_blk)
);

iq_gen_regslice_both #(
    .DataWidth( 128 ))
regslice_both_i_out_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(p_Result_3_7_fu_388_p10),
    .vld_in(i_out_TVALID_int_regslice),
    .ack_in(i_out_TREADY_int_regslice),
    .data_out(i_out_TDATA),
    .vld_out(regslice_both_i_out_V_data_V_U_vld_out),
    .ack_out(i_out_TREADY),
    .apdone_blk(regslice_both_i_out_V_data_V_U_apdone_blk)
);

iq_gen_regslice_both #(
    .DataWidth( 16 ))
regslice_both_i_out_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(16'd0),
    .vld_in(i_out_TVALID_int_regslice),
    .ack_in(regslice_both_i_out_V_keep_V_U_ack_in_dummy),
    .data_out(i_out_TKEEP),
    .vld_out(regslice_both_i_out_V_keep_V_U_vld_out),
    .ack_out(i_out_TREADY),
    .apdone_blk(regslice_both_i_out_V_keep_V_U_apdone_blk)
);

iq_gen_regslice_both #(
    .DataWidth( 16 ))
regslice_both_i_out_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(16'd0),
    .vld_in(i_out_TVALID_int_regslice),
    .ack_in(regslice_both_i_out_V_strb_V_U_ack_in_dummy),
    .data_out(i_out_TSTRB),
    .vld_out(regslice_both_i_out_V_strb_V_U_vld_out),
    .ack_out(i_out_TREADY),
    .apdone_blk(regslice_both_i_out_V_strb_V_U_apdone_blk)
);

iq_gen_regslice_both #(
    .DataWidth( 1 ))
regslice_both_i_out_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_last_V_fu_417_p2),
    .vld_in(i_out_TVALID_int_regslice),
    .ack_in(regslice_both_i_out_V_last_V_U_ack_in_dummy),
    .data_out(i_out_TLAST),
    .vld_out(regslice_both_i_out_V_last_V_U_vld_out),
    .ack_out(i_out_TREADY),
    .apdone_blk(regslice_both_i_out_V_last_V_U_apdone_blk)
);

iq_gen_regslice_both #(
    .DataWidth( 128 ))
regslice_both_q_out_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(p_Result_3_7_fu_388_p10),
    .vld_in(q_out_TVALID_int_regslice),
    .ack_in(q_out_TREADY_int_regslice),
    .data_out(q_out_TDATA),
    .vld_out(regslice_both_q_out_V_data_V_U_vld_out),
    .ack_out(q_out_TREADY),
    .apdone_blk(regslice_both_q_out_V_data_V_U_apdone_blk)
);

iq_gen_regslice_both #(
    .DataWidth( 16 ))
regslice_both_q_out_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(16'd0),
    .vld_in(q_out_TVALID_int_regslice),
    .ack_in(regslice_both_q_out_V_keep_V_U_ack_in_dummy),
    .data_out(q_out_TKEEP),
    .vld_out(regslice_both_q_out_V_keep_V_U_vld_out),
    .ack_out(q_out_TREADY),
    .apdone_blk(regslice_both_q_out_V_keep_V_U_apdone_blk)
);

iq_gen_regslice_both #(
    .DataWidth( 16 ))
regslice_both_q_out_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(16'd0),
    .vld_in(q_out_TVALID_int_regslice),
    .ack_in(regslice_both_q_out_V_strb_V_U_ack_in_dummy),
    .data_out(q_out_TSTRB),
    .vld_out(regslice_both_q_out_V_strb_V_U_vld_out),
    .ack_out(q_out_TREADY),
    .apdone_blk(regslice_both_q_out_V_strb_V_U_apdone_blk)
);

iq_gen_regslice_both #(
    .DataWidth( 1 ))
regslice_both_q_out_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_last_V_fu_417_p2),
    .vld_in(q_out_TVALID_int_regslice),
    .ack_in(regslice_both_q_out_V_last_V_U_ack_in_dummy),
    .data_out(q_out_TLAST),
    .vld_out(regslice_both_q_out_V_last_V_U_vld_out),
    .ack_out(q_out_TREADY),
    .apdone_blk(regslice_both_q_out_V_last_V_U_apdone_blk)
);

iq_gen_regslice_both #(
    .DataWidth( 64 ))
regslice_both_phase_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(phase_TDATA_int_regslice),
    .vld_in(phase_TVALID_int_regslice),
    .ack_in(phase_TREADY_int_regslice),
    .data_out(phase_TDATA),
    .vld_out(regslice_both_phase_V_data_V_U_vld_out),
    .ack_out(phase_TREADY),
    .apdone_blk(regslice_both_phase_V_data_V_U_apdone_blk)
);

iq_gen_regslice_both #(
    .DataWidth( 8 ))
regslice_both_phase_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(8'd0),
    .vld_in(phase_TVALID_int_regslice),
    .ack_in(regslice_both_phase_V_keep_V_U_ack_in_dummy),
    .data_out(phase_TKEEP),
    .vld_out(regslice_both_phase_V_keep_V_U_vld_out),
    .ack_out(phase_TREADY),
    .apdone_blk(regslice_both_phase_V_keep_V_U_apdone_blk)
);

iq_gen_regslice_both #(
    .DataWidth( 8 ))
regslice_both_phase_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(8'd0),
    .vld_in(phase_TVALID_int_regslice),
    .ack_in(regslice_both_phase_V_strb_V_U_ack_in_dummy),
    .data_out(phase_TSTRB),
    .vld_out(regslice_both_phase_V_strb_V_U_vld_out),
    .ack_out(phase_TREADY),
    .apdone_blk(regslice_both_phase_V_strb_V_U_apdone_blk)
);

iq_gen_regslice_both #(
    .DataWidth( 16 ))
regslice_both_phase_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(phase_TUSER_int_regslice),
    .vld_in(phase_TVALID_int_regslice),
    .ack_in(regslice_both_phase_V_user_V_U_ack_in_dummy),
    .data_out(phase_TUSER),
    .vld_out(regslice_both_phase_V_user_V_U_vld_out),
    .ack_out(phase_TREADY),
    .apdone_blk(regslice_both_phase_V_user_V_U_apdone_blk)
);

iq_gen_regslice_both #(
    .DataWidth( 1 ))
regslice_both_phase_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(phase_TLAST_int_regslice),
    .vld_in(phase_TVALID_int_regslice),
    .ack_in(regslice_both_phase_V_last_V_U_ack_in_dummy),
    .data_out(phase_TLAST),
    .vld_out(regslice_both_phase_V_last_V_U_vld_out),
    .ack_out(phase_TREADY),
    .apdone_blk(regslice_both_phase_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((grp_load_fu_241_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((grp_load_fu_241_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((grp_load_fu_241_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_V_41_reg_230 <= 29'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & ((grp_load_fu_241_p1 == 1'd1) | (ptmp_last_V_fu_426_p2 == 1'd0)))) begin
        i_V_41_reg_230 <= i_V_2_fu_444_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        p_max_reg_462[28 : 9] <= p_max_fu_249_p3[28 : 9];
        run_assign_fu_136 <= run;
    end
end

assign ap_ST_fsm_state1_blk = 1'b0;

always @ (*) begin
    if (((regslice_both_phase_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_q_out_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_i_out_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_out_V_data_V_U_apdone_blk == 1'b1))) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_tran3to4_state2 == 1'b1))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        ap_sig_allocacmp_p_run = run;
    end else begin
        ap_sig_allocacmp_p_run = run_assign_fu_136;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ptmp_last_V_fu_426_p2 == 1'd1))) begin
        grp_load_fu_241_p1 = run_assign_fu_136;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_load_fu_241_p1 = ap_sig_allocacmp_p_run;
    end else begin
        grp_load_fu_241_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        i_out_TDATA_blk_n = i_out_TREADY_int_regslice;
    end else begin
        i_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_out_TVALID_int_regslice = 1'b1;
    end else begin
        i_out_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        out_r_TDATA_blk_n = out_r_TREADY_int_regslice;
    end else begin
        out_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_r_TVALID_int_regslice = 1'b1;
    end else begin
        out_r_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        phase_TDATA_blk_n = phase_TREADY_int_regslice;
    end else begin
        phase_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        phase_TVALID_int_regslice = 1'b1;
    end else begin
        phase_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        q_out_TDATA_blk_n = q_out_TREADY_int_regslice;
    end else begin
        q_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        q_out_TVALID_int_regslice = 1'b1;
    end else begin
        q_out_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((grp_load_fu_241_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~((regslice_both_phase_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_q_out_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_i_out_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_out_V_data_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((phase_TREADY_int_regslice == 1'b0) | (q_out_TREADY_int_regslice == 1'b0) | (i_out_TREADY_int_regslice == 1'b0) | (out_r_TREADY_int_regslice == 1'b0))) | ((ap_enable_reg_pp0_iter0 == 1'b1) & ((phase_TREADY_int_regslice == 1'b0) | (q_out_TREADY_int_regslice == 1'b0) | (i_out_TREADY_int_regslice == 1'b0) | (out_r_TREADY_int_regslice == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((phase_TREADY_int_regslice == 1'b0) | (q_out_TREADY_int_regslice == 1'b0) | (i_out_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state3_io) | (out_r_TREADY_int_regslice == 1'b0))) | ((ap_enable_reg_pp0_iter0 == 1'b1) & ((phase_TREADY_int_regslice == 1'b0) | (q_out_TREADY_int_regslice == 1'b0) | (i_out_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state2_io) | (out_r_TREADY_int_regslice == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((phase_TREADY_int_regslice == 1'b0) | (q_out_TREADY_int_regslice == 1'b0) | (i_out_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state3_io) | (out_r_TREADY_int_regslice == 1'b0))) | ((ap_enable_reg_pp0_iter0 == 1'b1) & ((phase_TREADY_int_regslice == 1'b0) | (q_out_TREADY_int_regslice == 1'b0) | (i_out_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state2_io) | (out_r_TREADY_int_regslice == 1'b0))));
end

always @ (*) begin
    ap_block_state2_io = ((phase_TREADY_int_regslice == 1'b0) | (q_out_TREADY_int_regslice == 1'b0) | (i_out_TREADY_int_regslice == 1'b0) | (out_r_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((phase_TREADY_int_regslice == 1'b0) | (q_out_TREADY_int_regslice == 1'b0) | (i_out_TREADY_int_regslice == 1'b0) | (out_r_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state3_io = ((phase_TREADY_int_regslice == 1'b0) | (q_out_TREADY_int_regslice == 1'b0) | (i_out_TREADY_int_regslice == 1'b0) | (out_r_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((phase_TREADY_int_regslice == 1'b0) | (q_out_TREADY_int_regslice == 1'b0) | (i_out_TREADY_int_regslice == 1'b0) | (out_r_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state4 = ((regslice_both_phase_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_q_out_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_i_out_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_out_V_data_V_U_apdone_blk == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_tran3to4_state2 = ((grp_load_fu_241_p1 == 1'd0) & (ptmp_last_V_fu_426_p2 == 1'd1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign empty_fu_339_p1 = i_V_41_reg_230[15:0];

assign i_V_2_fu_444_p3 = ((icmp_ln1049_fu_433_p2[0:0] == 1'b1) ? 29'd0 : i_V_fu_438_p2);

assign i_V_fu_438_p2 = (i_V_41_reg_230 + 29'd1);

assign i_out_TVALID = regslice_both_i_out_V_data_V_U_vld_out;

assign icmp_ln1049_fu_433_p2 = ((i_V_41_reg_230 == p_max_reg_462) ? 1'b1 : 1'b0);

assign iq_user_fu_261_p1 = i_V_41_reg_230[7:0];

assign mul_fu_266_p3 = {{i_V_41_reg_230}, {3'd0}};

assign or_ln50_1_fu_280_p2 = (mul_fu_266_p3 | 32'd2);

assign or_ln50_2_fu_286_p2 = (mul_fu_266_p3 | 32'd3);

assign or_ln50_3_fu_292_p2 = (mul_fu_266_p3 | 32'd4);

assign or_ln50_4_fu_298_p2 = (mul_fu_266_p3 | 32'd5);

assign or_ln50_5_fu_304_p2 = (mul_fu_266_p3 | 32'd6);

assign or_ln50_6_fu_310_p2 = (mul_fu_266_p3 | 32'd7);

assign or_ln50_fu_274_p2 = (mul_fu_266_p3 | 32'd1);

assign out_r_TDATA_int_regslice = {{{{{{{{{or_ln50_6_fu_310_p2}, {or_ln50_5_fu_304_p2}}, {or_ln50_4_fu_298_p2}}, {or_ln50_3_fu_292_p2}}, {or_ln50_2_fu_286_p2}}, {or_ln50_1_fu_280_p2}}, {or_ln50_fu_274_p2}}, {i_V_41_reg_230}}, {3'd0}};

assign out_r_TVALID = regslice_both_out_V_data_V_U_vld_out;

assign p_Result_3_7_fu_388_p10 = {{{{{{{{{trunc_ln674_7_fu_384_p1}, {trunc_ln674_6_fu_380_p1}}, {trunc_ln674_5_fu_376_p1}}, {trunc_ln674_4_fu_372_p1}}, {trunc_ln674_3_fu_368_p1}}, {trunc_ln674_2_fu_364_p1}}, {trunc_ln674_1_fu_360_p1}}, {trunc_ln674_fu_356_p1}}, {3'd0}};

assign p_max_fu_249_p3 = {{max}, {9'd0}};

assign phase_TDATA_int_regslice = {{{{empty_fu_339_p1}, {empty_fu_339_p1}}, {empty_fu_339_p1}}, {empty_fu_339_p1}};

assign phase_TLAST_int_regslice = ((phase_user_fu_257_p1 == 9'd511) ? 1'b1 : 1'b0);

assign phase_TUSER_int_regslice = phase_user_fu_257_p1;

assign phase_TVALID = regslice_both_phase_V_data_V_U_vld_out;

assign phase_user_fu_257_p1 = i_V_41_reg_230[8:0];

assign ptmp_last_V_fu_426_p2 = ((phase_user_fu_257_p1 == 9'd511) ? 1'b1 : 1'b0);

assign q_out_TVALID = regslice_both_q_out_V_data_V_U_vld_out;

assign tmp_last_V_fu_417_p2 = ((iq_user_fu_261_p1 == 8'd255) ? 1'b1 : 1'b0);

assign trunc_ln674_1_fu_360_p1 = or_ln50_fu_274_p2[15:0];

assign trunc_ln674_2_fu_364_p1 = or_ln50_1_fu_280_p2[15:0];

assign trunc_ln674_3_fu_368_p1 = or_ln50_2_fu_286_p2[15:0];

assign trunc_ln674_4_fu_372_p1 = or_ln50_3_fu_292_p2[15:0];

assign trunc_ln674_5_fu_376_p1 = or_ln50_4_fu_298_p2[15:0];

assign trunc_ln674_6_fu_380_p1 = or_ln50_5_fu_304_p2[15:0];

assign trunc_ln674_7_fu_384_p1 = or_ln50_6_fu_310_p2[15:0];

assign trunc_ln674_fu_356_p1 = i_V_41_reg_230[12:0];

always @ (posedge ap_clk) begin
    p_max_reg_462[8:0] <= 9'b000000000;
end


// synthesis translate_off
`include "iq_gen_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on

endmodule //iq_gen

